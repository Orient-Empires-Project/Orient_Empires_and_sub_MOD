window = {
	name = "character_event"

	visible = "[Not(HasOpenSuccession( GetPlayer ))]"

	parentanchor = center
	widgetanchor = center
	size = { 1120 585 }
	layer = events
	alpha = 1

	datacontext = "[EventWindow.AccessEventWindowData]"

	using = Event_Window_Debug_OptionTooltips

	state = {
		name = show
		trigger_on_create = yes
		using = Animation_FadeIn_Standard
		duration = 0.7

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

			soundparam = {
				name = StateChange
				value = 1
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	event_window_dimmer_widget = {}

	widget = {
		size = { 100% 100% }
		using = Window_Background
		using = Window_Decoration_Frontend_Flat
	}

	event_window_background_widget = {
		margin = { 40 20 }

		state = {
			name = _show
			using = Animation_FadeIn_Standard
			duration = 0.7
		}

		state = {
			#TODO[WL]: TIT-53953 Add a trigger
			name = background_shake_loop
			next = background_shake_loop_1
			duration = 0.0
			alpha = 1.0
		}

		state = {
			name = background_shake_loop_1
			next = background_shake_loop_2
			position = { -6 0 }
			duration = 0.2
		}

		state = {
			name = background_shake_loop_2
			next = background_shake_loop_3
			position = { 5 0 }
			duration = 0.12
		}

		state = {
			name = background_shake_loop_3
			next = background_shake_loop_1
			position = { 7 1 }
			duration = 0.12
		}

		blockoverride "event_picture_properties"
		{}
	}

	#Background VFX
	margin_widget = {
		name = "background_shader_vfx_container"
		position = { 40 20 }
		size = { 100% 100% }
		margin = { 40 20 }
	}

	###CHARACTERS
	widget = {
		layoutstretchfactor_horizontal = 55
		parentanchor = bottom|hcenter
		position = { -40 -15 }
		size = { 100% 100% }
		scissor = yes

		state = {
			name = appear
			trigger_on_create = yes
			delay = 0.5
			using = Animation_Curve_Default
			alpha = 1
			duration = 0.5
		}

		state = {
			# TODO[WL]: TIT-53953 Add a trigger
			name = character_shake_loop
			next = character_shake_loop_1
			duration = 0.0
			alpha = 1.0
		}

		state = {
			name = character_shake_loop_1
			next = character_shake_loop_2
			position = { -35 -15 }
			duration = 0.2
		}

		state = {
			name = character_shake_loop_2
			next = character_shake_loop_3
			position = { -27 -15 }
			duration = 0.12
		}

		state = {
			name = character_shake_loop_3
			next = character_shake_loop_1
			position = { -25 -17 }
			duration = 0.12
		}

		### RIGHT CHARACTER ###
		widget = {
			parentanchor = bottom|right
			position = { 20 0 }
			size = { 330 558 }

			allow_outside = no
			
			portrait_event = {
				name = "portrait_right"
				datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
				visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
				parentanchor = bottom|hcenter
				position = { -80 -2 }
				size = { 500 558 }

				blockoverride "portrait_button"
				{
					size = { 700 558 }
					portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

					tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
					tooltip_offset = { 100 600 }
					using = tooltip_es
					tooltip_widgetanchor = center
				}

				blockoverride "highlight_visible"
				{
					visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('right_portrait') ))]"
					position = { 80 0 }
				}

				blockoverride "grayscale" {}

				highlight_icon = {
					name = "prison_bars"
					visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('right_portrait')))]"
					visible_at_creation = no
					size = { 285 500 }
					position = { -30 0 }
					parentanchor = bottom|right
					effectname = "NoHighlight"
					spriteType = corneredTiled
					texture_density = 1.5
					texture = "gfx/portraits/portrait_prison_body.dds"

					modify_texture = {
						name = "mask"
						texture =  "gfx/portraits/portrait_mask_event.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}
		}

		## LEFT CHARACTER ###
		widget = {
			parentanchor = bottom|hcenter
			position = { 100 - }
			size = { 330 558 }

			allow_outside = no

			portrait_event = {
				name = "portrait_left"
				datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
				visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
				parentanchor = bottom|hcenter
				position = { 80 0 }
				size = { 500 558 }

				blockoverride "portrait_button"
				{
					size = { 1000 558 }
					portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
					alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

					tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
					tooltip_widgetanchor = center
					tooltip_offset = { 350 600 }
					using = tooltip_ws
				}

				blockoverride "highlight_visible"
				{
					visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
					position = { -40 0 }
				}

				blockoverride "grayscale" {}

				highlight_icon = {
					name = "prison_bars"
					visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
					visible_at_creation = no
					size = { 280 500 }
					position = { 70 0 }
					parentanchor = bottom|left
					effectname = "NoHighlight"
					spriteType = corneredTiled
					texture_density = 1.5
					texture = "gfx/portraits/portrait_prison_body.dds"

					modify_texture = {
						name = "mask"
						texture =  "gfx/portraits/portrait_mask_event.dds"
						spriteType = Corneredstretched
						blend_mode = alphamultiply
					}
				}
			}
		}


		### Use this for single character
		portrait_event = {
			name = "portrait_center"
			visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), Not(EventWindowData.HasPortraitCharacter('right_portrait')))]"
			datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
			size = { 500 558 }
			position = { 200 -2 }
			parentanchor = bottom|hcenter

			blockoverride "portrait_button"
			{
				size = { 1000 558 }
				portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"
				tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
				using = tooltip_below
				tooltip_offset = { 550 -580 }
			}

			blockoverride "highlight_visible"
			{
				visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('left_portrait') ))]"
			}

			blockoverride "grayscale" {}

			highlight_icon = {
				name = "prison_bars"
				visible = "[And(Character.IsImprisoned, Not(EventWindowData.ShouldHideImprisonment('left_portrait')))]"
				visible_at_creation = no
				size = { 300 500 }
				position = { -60 0 }
				parentanchor = bottom|hcenter
				effectname = "NoHighlight"
				spriteType = corneredTiled
				texture_density = 1.5
				texture = "gfx/portraits/portrait_prison_body.dds"

				modify_texture = {
					name = "mask"
					texture =  "gfx/portraits/portrait_mask_event.dds"
					spriteType = Corneredstretched
					blend_mode = alphamultiply
				}
			}
		}
	}

	# Event Effect Video
	event_window_effect_2d_widget = {
		margin = { 40 20 }
	}

	#Foreground VFX
	margin_widget = {
		name = "foreground_shader_vfx_container"
		position = { 40 20 }
		size = { 100% 100% }
		margin = { 40 20 }
	}

	vbox = {
		name = "event_window"

		widget = {
			name = "event_window_content"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				margin = { 35 0 }
				margin_bottom = 15

				widget = {
					name = "text_spacer"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 45
				}
			}

			hbox = {
				margin_left = 35
				margin_right = 35
				margin_bottom = 15

				widget = {
					name = "text"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 45

					widget = {
						size = { 155% 96%}
						position = { 5 18 }

						background = {
							texture = "gfx/interface/component_tiles/tile_window_background_no_edge.dds"
							spriteType = Corneredtiled
							spriteborder = { 18 0 }
							texture_density = 2
							alpha = 0.7

							modify_texture = {
								texture = "gfx/interface/component_overlay/overlay_effect.dds"
								blend_mode = overlay
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_event_text.dds"
								blend_mode = alphamultiply
								alpha = 1
							}
						}
					}

					vbox = {
						name = "description_and_options"

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.2
							using = Animation_Curve_Default
							alpha = 1
							duration = 1.5
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_bottom = 10
							margin_top = 85

							scrollarea = {
								name = "description_scrollarea"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 490 -1 }
								maximumsize = { 490 -1 }

								scrollbarpolicy_horizontal = always_off

								scrollbar_vertical = {
									using = Scrollbar_Vertical

									blockoverride "alpha"{
										alpha = 0.6
									}
								}

								scrollwidget = {
									text_multi = {
										name = "description"
										minimumsize = { 480 -1 }
										maximumsize = { 480 -1 }
										autoresize = yes
										margin = { 20 4 }
										text = "[EventWindowData.GetDescription]"
										fontsize = 16
									}
								}
							}

							expand = {}
						}

						vbox = {
							allow_outside = yes
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes
							spacing = 5
							margin_bottom = 5

							hbox = {
								spacing = 5

								hbox = {
									name = "dynamic_birth_name"
									margin = { 5 0 }
								}
							}

							# Has a parent hbox to hack around layout set in type so it can be placed differently here and in Activity events. 
							hbox = {
								layoutpolicy_horizontal = expanding
								
								hbox = {
									name = "custom_widgets_container"
									layoutpolicy_horizontal = expanding
									margin = { 15 0 }

									state = {
										trigger_on_create = yes
										name = appear_test
										delay = 0.8
										using = Animation_Curve_Default
										alpha = 1
										duration = 0.6
									}
								}

								expand = {}
							}
							## anime core lib added:
							# scrollable option
							fixedgridbox = {
								name = "option_grid"
								addcolumn = 540
								addrow = 42
								datamodel = "[EventWindowData.GetOptions]"
								visible = "[LessThanOrEqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)3')]"

								item = {
									button_eventoption = {}
								}
							}
							scrollbox = {
								name = "option_scrollbox"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 0 180 }
								visible = "[GreaterThanOrEqualTo_int32( GetDataModelSize(EventWindowData.GetOptions), '(int32)4')]"
								blockoverride "scrollbox_content"
								{
									margin = { 17 10 }
									spacing = 10
									fixedgridbox = {
										name = "option_grid_more"
										addcolumn = 640
										addrow = 42
										datamodel = "[EventWindowData.GetOptions]"

										item = {
											button_eventoption = {}
										}
									}
								}
							}
							
							widget = {
								name = "characters_spacer"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								layoutstretchfactor_horizontal = 55
							}
							## anime core lib add end

							vbox = {
								name = "travel_event_info"
								visible = "[And(EventWindowData.ThemeKeyStartsWith('travel'), GetPlayer.GetTravelPlan.IsValid)]"
								layoutpolicy_horizontal = expanding
								margin = { 20 0 }

								divider_light = {
									layoutpolicy_horizontal = expanding

									modify_texture = {
										texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
										blend_mode = alphamultiply
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding

									hbox = {
										datacontext = "[GetPlayer.GetTravelPlan]"
										datacontext = "[TravelPlan.GetData]"
										datacontext = "[TravelPlanData.GetCurrentLocation]"

										layoutpolicy_horizontal = expanding
										spacing = 5

										### CoA
										coa_title_small = {
											datacontext = "[Province.GetTitle]"
											visible = "[Title.HasHolder]"
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "TRAVEL_EVENT_WINDOW_CURRENT_LOCATION"
												align = left|nobaseline
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												spacing = 5

												### Location Name
												text_single = {
													text = "[Province.GetNameNoTooltip]"
													visible = "[Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ]"
													align = left|nobaseline
												}
												text_single = {
													text = "[Province.GetName]"
													visible = "[Not( Or( ObjectsEqual( Province.GetTerrain.GetName,  GetTerrain( 'coastal_sea' ).GetName ), ObjectsEqual( Province.GetTerrain.GetName, GetTerrain( 'sea' ).GetName ) ) ) ]"
													align = left|nobaseline
												}

												icon = {
													name = "terrain"
													visible = "[Province.HasTerrain]"
													datacontext = "[Province.GetTerrain]"
													texture = "[Terrain.GetIcon]"
													size = { 25 25 }
													tooltip = "HOLDING_TERRAIN_TOOLTIP"
												}

												expand = {}

											}
										}

										expand = {
											layoutpolicy_horizontal = expanding
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											margin = { 20 4 }

											### Danger event indicator
											hbox = {
												visible = "[GreaterThanOrEqualTo_CFixedPoint(Subtract_CFixedPoint(Province.GetDangerValue(TravelPlan.Self), TravelPlanData.GetSafetyValue), '(CFixedPoint)0')]"
												datacontext = "[Province.GetDangerType(TravelPlanData.Self)]"
												layoutpolicy_horizontal = expanding
												spacing = 5

												expand = {}

												warning_icon = {
													size = { 28 28 }
												}

												widget = {
													size = { 30 30 }
													icon = {
														texture = "[TravelDangerType.GetIconActive]"
														parentanchor = center
														size = { 35 35 }
													}
												}

												### Put some indicator of travel danger intensity vs travel safety here, when we have decided on exactly what that is.
												#text_single = {
												#	raw_text = "33%"
												#	default_format = "#d"
												#	align = right|nobaseline
												#}

												tooltip = "[Province.GetTravelDangerTooltip(TravelPlan.Self)]"
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												expand =  {}

												### ETA to your next destination
												text_single = {
													layoutpolicy_horizontal = expanding
													text = "TRAVEL_EVENT_WINDOW_NEXT_DESTINATION"
													align = right|nobaseline
												}
											}
										}
									}
								}
							}

							# anime core lib moved
						}
					}
				}

				widget = {
					name = "characters_spacer"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 55
				}
			}
		}
	}

	margin_widget = {
		name = "bottom_characters"
		size = { 55% 170 }
		position = { -14 -10}
		parentanchor = bottom|right
		margin_bottom = 10
		allow_outside = yes

		icon = {
			name = "bottom_characters_bg"
			visible = "[Or(EventWindowData.HasPortraitOrArtifact('lower_left_portrait'), Or(EventWindowData.HasPortraitOrArtifact('lower_center_portrait'), EventWindowData.HasPortraitOrArtifact('lower_right_portrait')))]"
			position = { 0 0 }
			size = { 100% 100% }
			texture = "gfx/interface/window_event/event_bottom_char_bg.dds"
		}

		flowcontainer = {
			spacing = 20
			parentanchor = bottom|hcenter

			flowcontainer = {
				parentanchor = bottom
				direction = vertical
				ignoreinvisible = yes

				event_portrait_status_icons_left = {
					datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
					visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"

					background = {
						texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						shaderfile = "gfx/FX/pdxgui_default.shader"
						alpha = 0.5
						margin = { 5 5 }

						modify_texture = {
							texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
					}
				}

				spacer = {
					size = { 140 0 }
				}

				flowcontainer = {
					datacontext = "[EventWindowData.GetArtifact('lower_left_portrait')]"
					visible = "[EventWindowData.HasArtifact('lower_left_portrait')]"
					direction = vertical
					spacing =-5

					using = artifact_event_flowcontainer
				}

				widget = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
					size = { 140 150 }

					portrait_event_small = {
						name = "portrait_left_small_1"
						parentanchor = center
						position = { 0 -4 }

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
							tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
						}

						blockoverride "highlight_visible"
						{
							visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
						}

						blockoverride "status_icons" {}
						blockoverride "opinion_box" {}
						blockoverride "grayscale" {}

						blockoverride "coa"
						{
							event_portrait_status_icons_left = {
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
								parentanchor = bottom|left
								position = { -15 -5 }
								scale = 0.8

								background = {
									using = Background_Bottom_Fade
									margin = { 5 15 }
									using = Color_Black
									using = Mask_Rough_Edges
									alpha =  0.5

									modify_texture = {
										texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = overlay
									}
								}
							}
						}

						text_label_center = {
							parentanchor = bottom|hcenter
							position = { 20 -5 }
							alwaystransparent = yes
							text = "[Character.GetShortUINameNoTooltip]"
							visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
							max_width = 115
							align = center
							fontsize_min = 12
						}
					}
				}
			}

			flowcontainer = {
				parentanchor = bottom
				direction = vertical
				ignoreinvisible = yes

				spacer = {
					size = { 140 0 }
				}

				flowcontainer = {
					datacontext = "[EventWindowData.GetArtifact('lower_center_portrait')]"
					visible = "[EventWindowData.HasArtifact('lower_center_portrait')]"
					direction = vertical
					spacing =-5

					using = artifact_event_flowcontainer

					background = {
						using = Background_Area_Dark
						alpha = 0.4
						margin_bottom = -30
						margin_top = 10

						modify_texture = {
							name = "mask"
							texture = "gfx/interface/component_masks/mask_glow.dds"
							blend_mode = alphamultiply
						}
					}
				}

				widget = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_center_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('lower_center_portrait')]"
					size = { 140 150 }

					portrait_event_small = {
						name = "portrait_left_small_2"
						parentanchor = center
						position = { 0 -4 }

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_center_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_center_portrait'))]"
							tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
						}

						blockoverride "highlight_visible"
						{
							visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_center_portrait') ))]"
						}

						blockoverride "status_icons" {}
						blockoverride "opinion_box"{}
						blockoverride "grayscale" {}

						blockoverride "coa"
						{
							event_portrait_status_icons_left = {
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
								parentanchor = bottom|left
								position = { -15 -5 }
								scale = 0.8

								background = {
									using = Background_Bottom_Fade
									margin = { 5 15 }
									color = { 0.1 0.1 0.1 0.8 }

									modify_texture = {
										texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = overlay
									}
								}
							}
						}


						text_label_center = {
							parentanchor = bottom|hcenter
							position = { 20 -5 }
							alwaystransparent = yes
							text = "[Character.GetShortUINameNoTooltip]"
							visible = "[EventWindowData.ShouldShowPortraitInfo('lower_center_portrait')]"
							max_width = 115
							align = center
							fontsize_min = 12
						}
					}
				}
			}

			flowcontainer = {
				parentanchor = bottom
				direction = vertical
				ignoreinvisible = yes

				event_portrait_status_icons_right = {
					datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
					visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
					parentanchor = right

					background = {
						texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						shaderfile = "gfx/FX/pdxgui_default.shader"
						alpha = 0.5
						margin = { 5 5 }

						modify_texture = {
							texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
					}
				}

				spacer = {
					size = { 140 0 }
				}

				flowcontainer = {
					datacontext = "[EventWindowData.GetArtifact('lower_right_portrait')]"
					visible = "[EventWindowData.HasArtifact('lower_right_portrait')]"
					direction = vertical
					spacing =-5

					using = artifact_event_flowcontainer
				}

				widget = {
					datacontext = "[EventWindowData.GetPortraitCharacter('lower_right_portrait')]"
					visible = "[EventWindowData.HasPortraitCharacter('lower_right_portrait')]"
					size = { 140 150 }

					portrait_event_small = {
						name = "portrait_right_small_1"
						parentanchor = center
						position = { 0 -4 }

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_right_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_right_portrait'))]"
							tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
						}

						blockoverride "portrait_transformation"
						{
							portrait_scale = { -1 1 }
							portrait_offset = { 1 0 }
						}

						blockoverride "highlight_visible"
						{
							visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_right_portrait') ))]"
						}

						blockoverride "status_icons"{}
						blockoverride "opinion_box"{}
						blockoverride "grayscale" {}

						blockoverride "coa"
						{
							event_portrait_status_icons_left = {
								visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
								parentanchor = bottom|left
								position = { -15 -5 }
								scale = 0.8

								background = {
									using = Background_Bottom_Fade
									margin = { 5 15 }
									using = Color_Black
									using = Mask_Rough_Edges
									alpha =  0.5

									modify_texture = {
										texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = overlay
									}
								}
							}
						}

						text_label_center = {
							parentanchor = bottom|hcenter
							position = { 20 -5 }
							alwaystransparent = yes
							text = "[Character.GetShortUINameNoTooltip]"
							visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
							max_width = 115
							align = center
							fontsize_min = 12
						}
					}
				}
			}
		}
	}

	vbox = {
		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 70 }

			icon = {
				name = "theme_header"
				position = { 24 20 }
				size = { 1072 57 }
				texture = "[EventWindowData.GetThemeHeader]"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = { 0.6 0 }
				}

				state = {
					name = right
					next = left

					duration = 8
					bezier = { 0.8 0.18 0.96 .05 }

					modify_texture = {
						name = overlay
						translate_uv = { -0.6 0 }
					}
				}

				state = {
					name = left
					next = right

					duration = 0.0
					delay = 5

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right

					duration = 0.0

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}
			}

			text_single = {
				name = "title"
				parentanchor = vcenter
				position = { 128 7 }
				fontsize = 29
				fontsize_min = 16
				text = "[EventWindowData.GetTitle]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				using = Font_Type_Flavor
				max_width = 950

				alpha = 0

				background = {
					using = Background_Area_Dark
					margin_left = 50
					margin_right = 130
					margin_top = 5
					margin_bottom = 20
					alpha = 0.3

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_holding_illustration.dds"
						blend_mode = alphamultiply
					}
				}

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.2
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.5
				}
			}

			icon = {
				name = "theme_icon"
				parentanchor = vcenter
				position = { 28 10 }
				size = { 90 90 }
				texture = "[EventWindowData.GetThemeIcon]"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = { 0.6 0 }
				}

				state = {
					name = right
					next = left

					duration = 2
					bezier = { .8 .18 .96 .05 }

					modify_texture = {
						name = overlay
						translate_uv = { -0.6 0 }
					}
				}

				state = {
					name = left
					next = right

					duration = 0.0
					delay = 5


					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right

					duration = 0.0

					modify_texture = {
						name = overlay
						translate_uv = {0.6 0}
					}
				}
			}
		}

		expand = {}
	}

	icon = {
		visible = "[And( EventWindowData.ShouldShowContentSource, EventWindowData.GetContentSourceDlc.HasEventDecoration )]"
		name = "source_icon"
		position = { -22 20 }
		size = { 263 64 }
		parentanchor = top|right
		texture = "[EventWindowData.GetContentSourceDlc.GetEventDecoration]"
		tooltip = "EVENT_CONTENT_SOURCE_TT"
		alpha = 1
	}

	flowcontainer = {
		name = "debug_stuff"
		visible = "[InDebugMode]"
		parentanchor = top|right
		position = { -100 25 }
		ignoreinvisible = yes

		using = Event_Window_Debug_Info
	}

}
