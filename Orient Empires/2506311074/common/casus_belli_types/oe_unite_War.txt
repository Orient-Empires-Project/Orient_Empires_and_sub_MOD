unite_war = { 
	icon = vassalization
	group = conquest
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						OR = {
							has_innovation = innovation_divine_right
							has_innovation = innovation_centralization_of_authority
							has_cultural_parameter = multiple_claim_wars
							has_cultural_tradition = tradition_malleable_invaders
						}						
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						OR = {
							has_innovation = innovation_rightful_ownership
							has_innovation = innovation_centralization_of_authority
						}
					}
				}
			}
		}
	}
	
	allowed_for_character = {
		scope:attacker = {
			OR = {
				capital_province ?= { geographical_region = world_asia_china }
				culture = { has_cultural_pillar = heritage_chinese }
			}
			NOT = { is_bureau_government_trigger = yes }
		}
		NOT = {
			government_has_flag = government_is_landless_adventurer
		}
	}
	allowed_against_character = {
		capital_province ?= { geographical_region = world_asia_china }
		NOT = { liege = scope:attacker.liege }
		OR = {
			NOT = {
				scope:attacker = {			
					is_independent_ruler = no
					highest_held_title_tier <= scope:defender.highest_held_title_tier 
				}
			}
			scope:defender = {
				any_character_struggle = {
					involvement = involved
					is_struggle_type = tartaria_struggle
					has_struggle_phase_parameter = unlocks_oe_reclamation_casus_belli
				}
			}
			scope:defender.top_liege = {
				is_oe_imperial_government_trigger = yes
				any_character_war = {
					OR = {
						using_cb = revolt_independence_war
						using_cb = unite_war
					}
				}
			}
		}
	}
	target_titles = neighbor_land
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	
	on_declaration = {
		on_declared_war = yes
		#逐鹿中原前自动投降
		if = {
			limit = {
				scope:attacker = {
					is_oe_imperial_court_trigger = yes
					is_ai = yes
				}
				scope:defender = {
					is_ai = yes
					is_oe_imperial_court_trigger = no
				}
			}
			scope:defender = {
				if = {
					limit = { highest_held_title_tier < tier_empire }
					trigger_event = {
						id = east_title.0001
						days = 3
					}
				}
			}
		}		
	}
	
	cost = {
		piety = {
			value = 0
			if = {
				limit = { scope:attacker = { is_ai = no } }
				add = common_cb_impious_piety_cost
			}
		}
		prestige = {
			value = 60
			if = {
				limit = { scope:attacker = { is_ai = no } }
				add = {	
					value = 0
					add = claim_cb_prestige_cost
					multiply = common_cb_prestige_cost_multiplier
		
					if = {
						limit = {
							scope:attacker = {
								has_character_flag = temp_no_claim_war_cost
							}
						}
						multiply = {
							value = 0
							desc = "not_imprisoned_filter" # Says 'free'
						}
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
	
		if = {
			limit = {
				scope:defender.primary_title.tier > scope:attacker.primary_title.tier
				scope:defender.primary_title = {
					tier = tier_empire
					NOT = { this = title:e_celestia }
				}			
			}
			scope:defender = {
				destroy_title = scope:defender.primary_title
			}
		}
		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		else_if = {
			limit = {
				scope:attacker = { is_ai = yes }
				scope:defender = { is_ai = yes }
				scope:defender = {
					capital_province ?= { geographical_region = world_asia_china }
				}
				scope:defender.primary_title.tier <= tier_kingdom
			}
			scope:defender = {
				every_held_title = {
					if = {
						limit = {					
							tier = scope:defender.primary_title.tier
						}
						change_title_holder_include_vassals = {
							holder = scope:attacker
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}
			scope:defender = {
				every_vassal = {
					limit = {
						dynasty = scope:defender.dynasty #同家族剥夺
						primary_title.tier > tier_barony
						capital_province ?= { geographical_region = world_asia_china }
					}
					every_held_title = {
						limit = {
							tier = tier_county
							target_is_de_jure_liege_or_above = title:e_cathay
						}
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
				}
			}
			scope:defender = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:attacker
							change = scope:change
						}
					}
				}
			}

			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		#望风而降
		if = {
			limit = {
				scope:attacker = {
					highest_held_title_tier = tier_empire
					is_ai = yes
				}
			}
			scope:attacker = { save_scope_as = new_ruler }
			title:e_celestia = {
				every_dejure_vassal_title_holder = {
					limit = {
						is_independent_ruler = yes
						is_ai = yes
						character_is_realm_neighbor = scope:attacker
						NOT = { has_title = title:e_celestia }
						NOT = { this = scope:defender }
						NOT = { this = scope:attacker }
						NOT = { has_truce = scope:attacker }
						highest_held_title_tier < tier_empire
					}
					trigger_event = {
						id = east_title.0001
						days = 30
					}
				}
			}
		}
		if = {
			limit = {
				scope:attacker = {
					has_primary_title = title:e_celestia
				}
				scope:defender = {
					OR = {
						is_oe_imperial_government_trigger = yes
						has_primary_title = title:k_han
					}
					NOT = { has_title = title:e_celestia }
					NOT = { has_title = title:e_cathay }
				}
			}
			scope:defender = {
				every_held_title = {
					limit = {
						OR = {
							tier = tier_empire
							AND = {
								tier = tier_kingdom
								is_titular = yes
							}
						}
					}
					add_to_list = titles_to_destroy
				}
			}
			every_in_list = {
				list = titles_to_destroy
				scope:attacker = {
					destroy_title = prev
				}
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige loss for the attacker
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 6
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_invalidated = {
	}
	
	on_invalidated_desc = {
		desc = debug_war_invalidated_desc
	}
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	attacker_ticking_warscore = 0.05
	defender_ticking_warscore = 0.05	

	ignore_effect = change_title_holder
	war_name = "CHINA_WAR_OF_REUNIFICATION_NAME"
	war_name_base = "CHINA_WAR_OF_REUNIFICATION_NAME"
	cb_name_no_target = "WAR_OF_REUNIFICATION"
	ai_only_against_neighbors = yes
	interface_priority = 100
	truce_days = 300
	
	max_attacker_score_from_battles = 150
	attacker_score_from_battles_scale = 100
	defender_score_from_battles_scale = 100

	attacker_wargoal_percentage = 0.5					# How much the Attacker need to occupy of a wargoal to gain ticking War Score. 0.0 means "at least one occupation"
	defender_wargoal_percentage = 1

	battle_participation_mult = 1.2
}



oe_de_jure_cb = {
	icon = de_jure_cb
	group = de_jure
	should_check_for_interface_availability = no # Covered by the county dejure cb

	allowed_for_character = {
		scope:attacker = {
			culture = {
				OR = {
					has_innovation = innovation_centralization_of_authority
					has_innovation = innovation_rightful_ownership
				}
			}
		}
		NOT = {
			government_has_flag = government_is_landless_adventurer
		}
	}
	
	allowed_against_character = {
		scope:attacker = {
			has_de_jure_claim_on = scope:defender
		}
		NOT = {
			OR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
	}
	target_titles = de_jure
	ai_only_against_neighbors = yes
	#target_title_tier = all
	ignore_effect = change_title_holder
	#target_de_jure_regions_above = yes
	combine_into_one = yes

	valid_to_start = {
		scope:target = {
			any_this_title_or_de_jure_above = {
				exists = holder
				holder = {
					OR = {
						this = scope:attacker
						target_is_liege_or_above = scope:attacker
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			# scale base value based on number of counties x 100
			add = {	
				every_in_list = { 
					list = target_titles 
					limit = {
						tier = tier_county
						holder.top_liege = scope:defender
					}
					add = 100
				}
				desc = CB_CLAIM_COST_TARGET_TITLES
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			scope:attacker = {
				has_de_jure_claim_on = scope:defender
			}
		}
	}

	on_invalidated_desc = msg_de_jure_all_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}
		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes
		
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		every_in_list = {
			list = target_titles
			de_jure_liege.holder = { save_scope_as = temp_de_jure_liege }
			add_hook_from_temp_de_jure_liege_to_attacker = yes
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		# Setup and execute the changes to titles and vassals.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}
		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
				multiply = -5.0
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}

		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		
		# Attacker must pay the defender war reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Create an 'helper' de jure CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
		}
		# Attacker loses Prestige, all other participants gain Prestige based on their war contribution (Defender gets full Prestige).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_de_jure_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 100
			LOSER_ALLY_FAME_SCALE = 100
		}


	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "DEJURE_CB_WAR_NAME"
	war_name_base = "DEJURE_CB_WAR_NAME_BASE"
	cb_name = DEJURE_CB_NAME
	interface_priority = 100
	
	attacker_wargoal_percentage = 0.8

	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150
	
	max_ai_diplo_distance_to_title = 500
}