#获得头衔时触发
# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
# scope:transfer_type 的可用类型
# flag:conquest 
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

#方向：从流官池升官 改为 内阁成员升官

on_game_start_after_lobby = { #开局分配官阶
	on_actions = {
		east_on_after_lobby_bureaucrat_effects
	}
}	
	
	
east_on_after_lobby_bureaucrat_effects = {	
	effect = {
		### EP3 ADMIN SETUP ###
		every_independent_ruler = {
			limit = { government_has_flag = government_is_celestial }
			save_scope_as = top_liege
			### EP3 NOBLE FAMILIES & DOMICILE SETUP ###
			random_held_title = { # May be removed once every_noble_family includes liege (TIT-51212)
				limit = { is_oe_noble_family_title = yes }
				set_coa = scope:top_liege.house
			}
			every_noble_family = {
				# Ensure Noble Family CoA match House
				set_coa = holder.house
				# Ensure holders of historical noble family titles are the default house heads
				holder ?= {
					save_scope_as = nf_holder
					if = {
						limit = { is_landed = yes }
						capital_province = { save_scope_as = domicile_location }
					}
					# TODO_CD_EP3: remove once TIT-51212 is resolved and confirmed
					house ?= {
						if = {
							limit = { house_head != scope:nf_holder }
							set_house_head = scope:nf_holder
						}
					}
				}
				set_color_from_title = scope:nf_holder.capital_county
			}
		}
		every_ruler = {
			if = {
				limit = {
					is_oe_landed_bureaucrat_trigger = yes
					is_adult = yes
					is_male = yes
				}
				if = {
					limit = { NOT = { has_trait = lifestyle_bureaucrat } }
					add_trait = lifestyle_bureaucrat
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = scholastics
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = accomplishments
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = sociability
						LEVEL_1 = yes
						LEVEL_3 = no
					}
					add_random_tiered_trait_track_xp_effect = {
						TRAIT = lifestyle_bureaucrat
						TRACK = seniority
						LEVEL_1 = yes
						LEVEL_3 = no
					}
				}
				if = {
					limit = {
						NOT = { has_character_modifier = bureaucrat_positioned_term }
					}
					add_character_modifier = {
						modifier = bureaucrat_positioned_term
						years = 4
					}
				}
				if = {
					limit = {
						has_trait = jinshi
						NOT = { has_trait = lifestyle_bureaucrat }
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = scholastics
							value = medium_lifestyle_random_xp_low
						}
					}
				}
				if = {
					limit = {
						has_trait = zhuangyuan
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
						add_trait_xp = {
							trait = lifestyle_bureaucrat
							track = scholastics
							value = medium_lifestyle_random_xp_high
						}
					}
				}
				#every_councillor = {
					##随机获得官阶经验
					#if = {
						#limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						#add_trait = lifestyle_bureaucrat
						##考绩数值用于开局判定资历，可比较同官阶角色的次序，以节省性能。
						#add_trait_xp = {
							#trait = lifestyle_bureaucrat
							#track = seniority
							#value = age
						#}
						#add_trait_xp = {
							#trait = lifestyle_bureaucrat
							#track = accomplishments
							#value = bureaucracy_exp_value
						#}
					#}
				#}
			}
		}		
	}
}


three_year_playable_pulse = { #三年考绩+科举
	on_actions = { 
		BureaucracyEmpire_jinshi_pulse	
		BureaucracyEmpire_yearly_new_pulse
	}
}

#科举考试
BureaucracyEmpire_jinshi_pulse = {
	trigger = {
		has_primary_title = title:e_celestia
		is_at_war = no
		piety_level >= 4
		has_global_variable = examination_modifier
	}
	effect = {
		add_piety = -100
		primary_title = { save_scope_as = temp_title }
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi1
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi2
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_jinshi_repopulate
			save_scope_as = jinshi3
		}
		create_character = {
			location = scope:temp_title.title_capital_county.title_province
			template = celestial_zhuangyuan_repopulate
			save_scope_as = zhuangyuan
		}
		add_courtier = scope:zhuangyuan
	}
}

#random_yearly_everyone_pulse = { #提拔县官时开启
	#on_actions = { 
		#BureaucracyEmpire_yearly_new_pulse
	#}
#}
#three_year_pool_pulse = { 无地考绩高者获得官阶
#	on_actions = { 
#		BureaucracyEmpire_pool_pulse
#	}
#}
#
#BureaucracyEmpire_pool_pulse = {
#	effect = {
#		if = {
#			limit = {			
#				OR = {
#					bureaucracy_exp_value > 40
#					has_trait = jinshi
#					has_trait = zhuangyuan
#					has_trait = lifestyle_bureaucrat
#				}
#			}
#			#添加官阶特质
#			if = {
#				limit = { NOT = { has_trait = lifestyle_bureaucrat } }
#				add_trait = lifestyle_bureaucrat
#				add_trait_xp = {
#					trait = lifestyle_bureaucrat
#					track = seniority
#					value = bureaucracy_exp_value
#				}
#			}
#			random_ruler = {
#				limit = { is_oe_imperial_court_trigger = yes }
#				save_scope_as = temp_liege
#			}
#			move_to_pool_at = scope:temp_liege.capital_county.title_province
#		}
#	}
#}

BureaucracyEmpire_yearly_new_pulse = {
	effect = {
		if = {#年度官僚资历结算
			limit = {
				is_oe_landed_bureaucrat_trigger = yes
				is_male = yes
			}
			#添加官阶特质
			bureaucrat_add_random_trait_xp_effect = yes
			every_councillor = {
				#添加官阶特质
				bureaucrat_add_random_trait_xp_effect = yes
			}
			save_scope_as = bureaucrat		
			primary_title = { save_scope_as = primary_title }
			every_held_title = {
				limit = {
					is_landless_type_title = no
					is_oe_titular_title = no
				}
				add_to_list = list_old_titles
			}
			liege = { save_scope_as = temp_liege } #top_liege
			#储存契约
			save_east_contract_effect = yes
			if = {
				limit = {
					#has_trait = lifestyle_bureaucrat
					is_oe_landed_bureaucrat_trigger = yes
				}
				#资历
				#add_trait_xp = {
					#trait = lifestyle_bureaucrat
					#track = seniority
					#value = highest_held_title_tier
				#}
				#奉献等级
				#add_trait_xp = {
					#trait = lifestyle_bureaucrat
					#track = scholastics
					#value = piety_level
				#}
				#是内阁成员
				if = {
					limit = { is_councillor = yes }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = dynasty.dynasty_prestige_level
					}
				}			
				#生活方式加经验
				#if = {
					#limit = {
						#OR = {
							#has_lifestyle = learning_lifestyle
							#has_trait = jinshi
							#has_trait = zhuangyuan
							#has_trait = poet
							#has_trait = lifestyle_mystic
						#}
					#}
					#add_trait_xp = {
						#trait = lifestyle_bureaucrat
						#track = scholastics
						#value = perks_in_learning_lifestyle
					#}
					##add_trait_xp = {
						##trait = lifestyle_bureaucrat
						##track = scholastics
						##value = dynasty.dynasty_prestige_level
					##}
				#}
				#if = {
					#limit = { has_lifestyle = stewardship_lifestyle }
					#add_trait_xp = {
						#trait = lifestyle_bureaucrat
						#track = accomplishments
						#value = perks_in_stewardship_lifestyle
					#}
				#}
				#if = {
					#limit = { has_lifestyle = diplomacy_lifestyle }
					#add_trait_xp = {
						#trait = lifestyle_bureaucrat
						#track = sociability
						#value = perks_in_diplomacy_lifestyle
					#}
				#}
				#门第加成、朝中有人
				if = {
					limit = {
						exists = dynasty
						NOT = { dynasty = top_liege.dynasty }
						dynasty = { dynasty_prestige_level >= 1 }
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = dynasty.dynasty_prestige_level
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = Bureaucrat_emperor_opinion_value
					}
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = sociability
						value = Bureaucrat_councillor_opinion_value
					}
				}
				#民众满意度
				if = {
					limit = { has_lifestyle = stewardship_lifestyle }
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = Bureaucrat_county_opinion_value
					}
				}
				#退休和罢免
				if = {
					limit = {
						is_oe_available_ai_at_peace = yes						
						#NOT = { is_councillor_of = top_liege } #京官
						#NAND = {
							#is_councillor = yes
							#exists = liege_or_court_owner
							#liege_or_court_owner = { is_ai = no }
						#}
						AND = {
							exists = primary_title.current_heir
							primary_title.current_heir = {
								is_governor = no
							}
						}
						OR = {
							is_female = yes
							#governor_efficiency <= 0.5
							#governor_efficiency < primary_title.current_heir.governor_efficiency
							#bureaucrat_level_value < primary_heir.bureaucrat_level_value
							AND = {
								bureaucrat_level_value < bureaucrat_title_rank_value #州等
								bureaucrat_title_rank_value > 3
							}
							NOT = { has_trait = lifestyle_bureaucrat }
							NOT = { has_character_modifier = bureaucrat_positioned_term }
							age < 20 #知州最低年龄
							age > 70
							is_physically_able = no
							is_oe_illegal_criminal_trigger = yes #众所周知的罪行
						}
					}
					#储存契约
					save_east_contract_effect = yes
					if = { limit = { is_diarch = yes } depose_diarch = yes }
					if = {
						limit = {
							OR = {
								is_prefect = yes
								has_ep3_dlc_trigger = no
							}
						}
						depose = yes
						move_to_pool_at = scope:temp_liege.capital_county.title_province
					}
					if = {
						limit = { is_governor = yes }
						oe_governor_resignation_title_transfer_effect = yes
					}
					every_in_list = {
						list = list_old_titles
						scope:bureaucrat = {
							remove_claim = prev
						}
					}
					add_stress = 70
				}
				#升迁 旧律令制下
				if = {
					limit = {
						NOT = { government_has_flag = government_has_influence }
						is_oe_available_ai_at_peace = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term } #任期已满
						bureaucrat_level_value > bureaucrat_title_rank_value #官阶高于职等
					}
					#储存契约
					save_east_contract_effect = yes					
					add_stress = -100
					if = {
						limit = {
							OR = {
								is_prefect = yes
								has_ep3_dlc_trigger = no
							}
						}
						depose = yes
						move_to_pool_at = scope:temp_liege.capital_county.title_province
					}
					if = {
						limit = {
							bureaucrat_level_value <= 5
							is_governor = yes
							top_liege = {
								any_vassal ?= {
									bureaucrat_title_rank_value = root.bureaucrat_level_value
								}
							}
						}
						oe_governor_resignation_title_transfer_effect = yes	
						create_title_and_vassal_change = {
							type = stepped_down
							save_scope_as = change
						}												
						top_liege = {
							random_vassal = {
								limit = {
									bureaucrat_title_rank_value = root.bureaucrat_level_value
								}
								every_held_title = {
									limit = {
										is_landless_type_title = no
										is_oe_titular_title = no
									}
									change_title_holder = root
								}
							}
						}
						resolve_title_and_vassal_change = change
					}
					#担任内阁 实验功能 TODO
					else_if = {
						limit = {
							bureaucrat_level_value > 5
							primary_title = tier_duchy
						}
						random_list = {
							10 = {
								trigger = {
									exists = top_liege.council_task:councillor_chancellor
									can_be_chancellor_trigger = { COURT_OWNER = top_liege }
								}
								modifier = {
									factor = diplomacy
								}
								modifier = {
									trigger = { highest_skill = diplomacy }
									factor = 10
								}
								top_liege.council_task:councillor_chancellor = {
									save_scope_as = target
								}
							}
							10 = {
								trigger = {
									exists = top_liege.council_task:councillor_steward
									can_be_steward_trigger = { COURT_OWNER = top_liege }
								}
								modifier = {
									factor = stewardship
								}
								modifier = {
									trigger = { highest_skill = stewardship }
									factor = 10
								}
								top_liege.council_task:councillor_steward = {
									save_scope_as = target
								}
							}
							10 = {
								trigger = {
									exists = top_liege.council_task:councillor_marshal
									can_be_marshal_trigger = { COURT_OWNER = top_liege }
								}
								modifier = {
									factor = martial
								}
								modifier = {
									trigger = { highest_skill = martial }
									factor = 10
								}
								top_liege.council_task:councillor_marshal = {
									save_scope_as = target
								}
							}
							10 = {
								trigger = {
									exists = top_liege.council_task:councillor_spymaster
									can_be_spymaster_trigger = { COURT_OWNER = top_liege }
								}
								modifier = {
									factor = intrigue
								}
								modifier = {
									trigger = { highest_skill = intrigue }
									factor = 10
								}
								top_liege.council_task:councillor_spymaster = {
									save_scope_as = target
								}
							}
							10 = {
								trigger = {
									exists = top_liege.council_task:councillor_court_chaplain
									can_be_court_chaplain_trigger = { COURT_OWNER = top_liege }
								}
								modifier = {
									factor = learning
								}
								modifier = {
									trigger = { highest_skill = learning }
									factor = 10
								}
								top_liege.council_task:councillor_court_chaplain = {
									save_scope_as = target
								}
							}
						}				
						oe_governor_resignation_title_transfer_effect = yes				
						move_to_pool_at = scope:temp_liege.capital_county.title_province
						top_liege = {
							assign_council_task = {
								target = root
								council_task = scope:target
							}
						}
					}
				}
				#县官
				#if = {
					#limit = {
						#OR = {
							#lifestyle_bureaucrat_3_trigger = yes
							#lifestyle_bureaucrat_4_trigger = yes
							#lifestyle_bureaucrat_5_trigger = yes
						#}
						#highest_held_title_tier = tier_barony
					#}
					#depose = yes
					#move_to_pool_at = scope:temp_liege.capital_county.title_province
					#add_stress = -100
				#}
			}
		}
		#罢免 清空资历
		if = {
			limit = {
				is_oe_available_ai_at_peace = yes
				OR = {
					is_physically_able = no
					is_oe_illegal_criminal_trigger = yes #众所周知的罪行
				}
				has_trait = lifestyle_bureaucrat
			}
			remove_trait = lifestyle_bureaucrat
		}
		#独立清空官阶
		if = {
			limit = {
				is_independent_ruler = yes
			}
			if = {
				limit = { has_trait = lifestyle_bureaucrat }
				remove_trait = lifestyle_bureaucrat
			}
		}
	}
}

on_title_gain = {
	on_actions = {
		BureaucracyEmpire_player_pulse
		#BureaucracyEmpire_ai_succession_pulse #指定继承人
		BureaucracyEmpire_on_title_gain_new #交接非法理头衔
	}
}

#玩家流官叙迁，用其他默认官员触发
BureaucracyEmpire_player_pulse = {
	trigger = {
		scope:title.tier > tier_barony
		scope:title = {
			is_oe_noble_family_title = no
			is_landless_type_title = no
		}
		is_oe_landed_bureaucrat_trigger = yes #暂时接班的ai
		is_oe_available_ai_at_peace = yes
		is_councillor = no
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:granted #被授予头衔
			scope:transfer_type = flag:usurped #篡夺头衔
			scope:transfer_type = flag:stepped_down
			scope:transfer_type = flag:election
			scope:transfer_type = flag:faction_demand
			scope:transfer_type = flag:appointment
			scope:transfer_type = flag:appointment_succession
		}
		NOT = { has_character_modifier = bureaucrat_positioned_term }
	}	
	effect = {
		save_scope_as = temp_holder
		liege = {
			save_scope_as = liege
		}
		scope:temp_holder = {
			save_east_contract_effect = yes
		}
		every_held_title = {
			limit = {
				is_landless_type_title = no
				is_oe_titular_title = no
			}
			add_to_list = list_temp_title #目的地官位
		}
		every_vassal = {
			add_to_list = list_temp_vassal #目的地封臣
		}
		every_courtier = {
			add_to_list = list_temp_courtier #卸任廷臣
		}
		every_player = {
			if = {
				limit = {
					is_ai = no
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			save_scope_as = player
		}
		if = {
			limit = {
				is_oe_landed_bureaucrat_trigger = yes
				exists = scope:player
			}
			scope:player = {
				primary_title = {
					save_scope_as = old_primary_title #卸任官位
				}
				every_held_title = {
					limit = {
						is_landless_type_title = no
						is_oe_titular_title = no
					}
					add_to_list = list_old_title  #卸任官位
				}
				every_vassal = {
					add_to_list = list_old_vassal #卸任封臣
				}
				every_courtier = {
					add_to_list = list_old_courtier #卸任廷臣
				}
				liege = {
					save_scope_as = old_liege #卸任领主
				}
			}
			#玩家升迁，比较考绩即可
			if = {
				limit = {
					scope:title = { is_oe_noble_family_title = no }
					exists = scope:player.top_liege
					exists = scope:temp_holder.top_liege
					scope:player.top_liege = scope:temp_holder.top_liege
					OR = {
						scope:title.tier > scope:player.primary_title.tier #爵级
						AND = {
							scope:title.tier = scope:player.primary_title.tier #爵级
							scope:temp_holder.bureaucrat_title_rank_value > scope:player.bureaucrat_title_rank_value #州等
						}
					}
					scope:player = {
						is_oe_landed_bureaucrat_trigger = yes
						is_oe_available = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						is_oe_illegal_criminal_trigger = no #众所周知的罪行
					}
					OR = {
						scope:player.bureaucrat_level_value > scope:temp_holder.bureaucrat_level_value #比较官阶
						AND = {
							#scope:player.bureaucrat_level_value = scope:temp_holder.bureaucrat_level_value #比较官阶
							scope:player.governor_efficiency >= scope:temp_holder.governor_efficiency #比较考绩
						}
					}
				}
				scope:player = {
					trigger_event = bureaucracy.0001 #升官
				}
			}
			#玩家左迁，劣迹斑斑
			if = {
				limit = {
					scope:title = { is_oe_noble_family_title = no }
					exists = scope:player.top_liege
					exists = scope:temp_holder.top_liege
					scope:player.top_liege = scope:temp_holder.top_liege
					OR = {
						scope:title.tier < scope:player.primary_title.tier #爵级
						scope:temp_holder.bureaucrat_title_rank_value < scope:player.bureaucrat_title_rank_value #州等
					}
					OR = {
						#scope:player.bureaucracy_exp_value < scope:temp_holder.bureaucracy_exp_value #比较考绩
						scope:player.bureaucrat_level_value < scope:temp_holder.bureaucrat_level_value #比较官阶
						scope:player.governor_efficiency < scope:temp_holder.governor_efficiency #比较考绩
						AND = {
							scope:player.age < 30
							scope:player.age < scope:temp_holder.age
						}
					}
					scope:player = {
						is_oe_landed_bureaucrat_trigger = yes
						is_oe_available = yes
						NOT = { has_character_modifier = bureaucrat_positioned_term }
						OR = {
							#governor_efficiency <= 0.5 #无能总督
							#is_oe_illegal_criminal_trigger = yes #众所周知的罪行
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = women_cannot_be_granted_titles }
								}
								is_female = yes
							}
							trigger_if = {
								limit = { 
									top_liege.faith = { has_doctrine_parameter = men_cannot_be_granted_titles }
								}
								is_male = yes
							}
						}
					}
				}
				scope:player = {
					trigger_event = bureaucracy.0007 #贬官
				}
			}
		}
	}
}

BureaucracyEmpire_on_title_gain_new = {
	trigger = {
		#在天朝体制下
		is_oe_landed_bureaucrat_trigger = yes
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:granted #被授予头衔
			#scope:transfer_type = flag:usurped #篡夺头衔
			scope:transfer_type = flag:stepped_down
			scope:transfer_type = flag:election
			scope:transfer_type = flag:appointment
			scope:transfer_type = flag:appointment_succession
		}
		scope:title.tier >= tier_county
		scope:title.tier <= tier_kingdom
		scope:title = {
			is_oe_noble_family_title = no
			is_landless_type_title = no
		}
	}
	effect = {
		if = {
			limit = {
				#scope:transfer_type = flag:granted #被授予头衔
				is_adult = yes
			}
			
			set_bureaucrat_positioned_term_expectation_effect = yes #动态流官任期

			if = {
				limit = {
					NOT = { government_allows = administrative }
					government_has_flag = government_use_bureaucracy	
				}
				send_interface_toast = {
					type = event_toast_effect_good
					title = legitimacy_gain_toast
					left_icon = root
					add_legitimacy = {
						value = {
							value = 100 #miniscule_legitimacy_gain
							multiply = root.highest_held_title_tier
						}
					}
				}
			}
			#添加任期和流官特质经验
			bureaucrat_add_rank_trait_xp_effect = yes
		}
		if = {
			limit = {
				NOT = { has_character_modifier = bureaucrat_positioned_term }
			}
			set_bureaucrat_positioned_term_expectation_effect = yes #动态流官任期
		}
		root = {
			inter_east_contract_effect = yes
		}

		#如果该官员是因为升迁获得的头衔，交接掉原有头衔
		#trigger_event = bureaucracy.0013

		#旅行赴任
		if = {
			limit = {
				is_ai = no
				is_adult = yes
				scope:title = {
					is_oe_noble_family_title = no
					is_landless_type_title = no
				}
				NOT = { scope:title.title_capital_county.title_province = root.location }
			}
			start_travel_plan = {
				destination = scope:title.title_capital_county.title_province
				companion = scope:companion1
				companion = scope:companion2
				companion = scope:companion3
				on_start_on_action = bureaucracy_start
				on_travel_planner_cancel_on_action = pay_homage_travel_planner_exit
				on_arrival_event = travel_completion_event.1000
				on_arrival_destinations = last
				return_trip = no # One way
			}
		}
		#清理高官阶的廷臣
		#if = {
			#limit = {
				#any_courtier = {
					#has_trait = lifestyle_bureaucrat
				#}
			#}
			#save_scope_as = liege
			#every_courtier = {
				#limit = {
					#has_trait = lifestyle_bureaucrat
					#is_landed = no
					#bureaucrat_level_value > root.bureaucrat_level_value
					#courtier_allowed_to_leave_trigger = yes
					#is_oe_available_ai_at_peace = yes
				#}
				#move_to_pool_at = scope:liege.capital_county.title_province
			#}
		#}
	}
}

#测试继承
on_death = {
	on_actions = {
		BureaucracyEmpire_succession_pulse
	}
}
BureaucracyEmpire_succession_pulse = {
	trigger = {
		has_realm_law = official_succession_law
		is_ai = no
	}
	effect = {
		#世族
		if = {
			limit = {
				exists = player_heir
				any_held_title = {
					is_oe_noble_family_title = yes
					current_heir = player_heir
				}
			}
			# vanilla behavior
			set_player_character = player_heir
		}
		#非世族 无地继承人
		else_if = {
			limit = {
				player_heir ?= { is_landed = no }
			}
			if = {
				limit = {
					primary_title.tier <= tier_county
				}
				player_heir = {
					get_title = root.primary_title
				}
			}
			else_if = {
				limit = {
					NOT = {
						any_held_title = {
							is_oe_noble_family_title = yes
						}
					}
				}
				player_heir = {
					#create_noble_family_effect = yes
					change_influence = major_influence_gain
				}
				set_player_character = player_heir
			}
		}
		else_if = {
			limit = {
				primary_heir ?= { is_landed = yes }
			}
			set_player_character = primary_heir
		}
	}
}

BureaucracyEmpire_ai_succession_pulse = {
	trigger = {
		scope:title.tier >= tier_county
		has_realm_law = admin_succession_law
		#is_oe_landed_bureaucrat_trigger = yes #暂时接班的ai
		is_oe_available = yes
		is_ai = yes
		OR = {
			scope:transfer_type = flag:inheritance #继承
			scope:transfer_type = flag:abdication #退位继承
			scope:transfer_type = flag:usurped #篡夺头衔
			scope:transfer_type = flag:stepped_down
		}
	}
	effect = {
		if = {
			limit = {
				scope:previous_holder = { exists = var:oe_heir }
			}
			scope:previous_holder = { var:oe_heir = { save_scope_as = heir } }
			create_title_and_vassal_change = {
				type = stepped_down
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				limit = {
					is_landless_type_title = no
					is_oe_titular_title = no
				}
				change_title_holder_include_vassals = {
					holder = scope:heir
					change = scope:change
				}
				root = { remove_claim = prev }
			}

			resolve_title_and_vassal_change = scope:change

			if = {
				limit = { scope:heir = { is_landed = yes } }
				scope:heir = {
					inter_east_contract_effect = yes
					if = {
						limit = {
							NOT = { has_character_modifier = bureaucrat_positioned_term }
						}
						add_character_modifier = {
							modifier = bureaucrat_positioned_term
							years = 2
						}
					}
				}
			}			
		}
	}
}

#丁忧  改旅行守孝CD继承
#BureaucracyEmpire_family_pulse = {
#	trigger = {
#		culture = { has_cultural_parameter = patriarch_society }
#		NOT = { is_oe_imperial_court_trigger = yes }
#	}
#	effect = {
#		if = {
#			limit = {
#				any_child = {
#					is_oe_landed_bureaucrat_trigger = yes
#					is_ai = yes
#					count >= 1
#					is_alive = yes
#				}
#			}
#			save_scope_as = bureaucrat_parent
#			every_child = {
#				limit = {
#					is_oe_landed_bureaucrat_trigger = yes
#					is_oe_available = yes
#					is_ai = yes
#				}
#				save_scope_as = bureaucrat
#				save_east_contract_effect = yes
#				depose = yes
#				move_to_pool_at = scope:bureaucrat_parent.location
#			}
#		}
#	}
#}

#叙迁旅行
bureaucracy_start = {
	events = {
		bureaucracy.0010
	}
}

#战功
on_join_war_as_secondary = {
	on_actions = {
		accomplishments_medium_effects
	}
}
accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				NOT = { has_trait = lifestyle_bureaucrat }
				is_oe_landed_bureaucrat_trigger = yes
			}
			add_trait = lifestyle_bureaucrat
		}
		if = {
			limit = {
				has_trait = lifestyle_bureaucrat
				scope:war.primary_attacker = top_liege
			}
			add_trait_xp = {
				trait = lifestyle_bureaucrat
				track = accomplishments
				value = { 5 10 }
			}
		}
	}
}
on_war_won_attacker = {
	on_actions = {
		attacker_accomplishments_medium_effects
	}
}
attacker_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				scope:attacker = {
					NOT = { has_trait = lifestyle_bureaucrat }
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			scope:attacker = {
				add_trait = lifestyle_bureaucrat
			}
		}
		if = {
			limit = {
				scope:attacker = {
					has_trait = lifestyle_bureaucrat
				}
				NOR = {
					scope:defender = scope:attacker.liege
					scope:defender = scope:attacker.top_liege
					scope:defender.top_liege = scope:attacker.top_liege
				}
			}
			scope:attacker = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 10 30 }
				}
			}
		}
	}
}
on_war_won_defender = {
	on_actions = {
		defender_accomplishments_medium_effects
	}
}
defender_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				scope:defender = {
					NOT = { has_trait = lifestyle_bureaucrat }
					is_oe_landed_bureaucrat_trigger = yes
				}
			}
			scope:defender = {
				add_trait = lifestyle_bureaucrat
			}
		}
		if = {
			limit = {
				scope:defender = {
					has_trait = lifestyle_bureaucrat
					NOR = {
						scope:defender.liege = scope:attacker
						scope:defender.top_liege = scope:attacker
					}
				}
			}
			scope:defender = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 10 30 }
				}
			}
		}
	}
}
#勋位战功
on_accolade_rank_change = {
	on_actions = {
		accolade_accomplishments_small_effects
	}
}
accolade_accomplishments_small_effects = {
	effect = {
		if = {
			limit = {
				accolade_owner = { exists = liege }	
				accolade_owner = { liege = { is_oe_landed_bureaucrat_trigger = yes } }
			}
			save_scope_as = changing_accolade
			accolade_owner = {
				if = {
					limit = {
						scope:positive = yes
						has_dlc_feature = accolades
					}
					if = {
						limit = { NOT = { has_trait = lifestyle_bureaucrat } }
						add_trait = lifestyle_bureaucrat
					}				
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = { 5 10 }
					}
	
				}
			}
		}
	}
}
#基建
on_building_completed = {
	on_actions = {
		building_accomplishments_medium_effects
	}
}
building_accomplishments_medium_effects = {
	effect = {
		root = {
			if = {
				limit = {
					county.holder = {
						has_trait = lifestyle_bureaucrat
					}
					county = county.holder.capital_county
				}
				county.holder = {
					add_trait_xp = {
						trait = lifestyle_bureaucrat
						track = accomplishments
						value = { 8 15 }
					}
				}
			}
			if = {
				limit = {
					barony.holder = {
						NOT = { has_trait = lifestyle_bureaucrat }
						is_oe_landed_bureaucrat_trigger = yes
					}
				}
				barony.holder = {
					add_trait = lifestyle_bureaucrat
				}
			}
		}
	}
}
#传教
on_county_faith_change = {
	on_actions = {
		faith_scholastics_medium_effects
	}
}
faith_scholastics_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat }
				#NOT = { scope:old_faith = holder.top_liege.faith }
				root.faith.religion = holder.top_liege.faith.religion
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = { 8 15 }
				}
			}
		}
	}
}
#文化
on_county_culture_change = {
	on_actions = {
		culture_scholastics_medium_effects
	}
}
culture_scholastics_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat }
				#NOT = { scope:old_culture = holder.top_liege.culture }
				root.culture = holder.top_liege.culture
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = { 8 15 }
				}
			}
		}
	}
}
#发展度
development_accomplishments_medium_effects = {
	effect = {
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat }
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = accomplishments
					value = { 5 12 }
				}
			}
		}
	}
}
#旅行
on_travel_plan_complete = {
	on_actions = {
		lifestyle_bureaucrat_seniority_effects
	} 
}
lifestyle_bureaucrat_seniority_effects = {
	effect = {
		if = {
			limit = { has_trait = lifestyle_bureaucrat }
		}
		add_trait_xp = {
			trait = lifestyle_bureaucrat
			track = seniority
			value = { 5 12 }
		}
	}
}

petition_liege_0205 = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	} 
}
oe_petition_liege_0205 = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	} 
}
pay_homage_start = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	} 
}
hunt_end_events = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	}
}
feast_start_events = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	}
}
lifestyle_bureaucrat_sociability_effects = {
	effect = {
		if = {
			limit = { has_trait = lifestyle_bureaucrat }
			add_trait_xp = {
				trait = lifestyle_bureaucrat
				track = sociability
				value = { 5 12 }
			}
		}
	}
}

#Events that happen once you've returned home
pilgrimage_return_events = {
	on_actions = {
		oe_pilgrimage_return_events
	}
}

oe_pilgrimage_return_events = {
	effect = {
		if = {
			limit = { exists = var:visited_cultures_list }
			remove_variable = visited_cultures_list
		}
		if = {
			limit = {
				holder = { has_trait = lifestyle_bureaucrat }
				#NOT = { scope:old_faith = holder.top_liege.faith }
				root.faith.religion = holder.top_liege.faith.religion
			}
			holder = {
				add_trait_xp = {
					trait = lifestyle_bureaucrat
					track = scholastics
					value = { 8 15 }
				}
			}
		}
	}
	random_events = {
		100 = pilgrimage.9001
	}
}


fabricate_hook_method_success_outcome = {
	on_actions = {
		lifestyle_bureaucrat_seniority_effects
	}
}
on_hook_used = {
	on_actions = {
		lifestyle_bureaucrat_seniority_effects
	}
}
on_became_house_head = {
	on_actions = {
		lifestyle_bureaucrat_seniority_effects
	}
}

court_ongoing = {
	trigger = {
		exists = scope:scheme
	}
	on_actions = {
		lifestyle_bureaucrat_seniority_effects
	}
}

sway_success = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	}
}
seduce_generic_success = {
	on_actions = {
		lifestyle_bureaucrat_sociability_effects
	}
}


#TODO 科举 之后上学