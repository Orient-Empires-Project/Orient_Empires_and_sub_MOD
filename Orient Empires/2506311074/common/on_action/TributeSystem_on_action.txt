############# TributeSystem_on_action
# by 往来天地间 WangLaiTianDiJian
# TributeSystem

#WLTDJ20220116

#新朝贡替代 20250428

on_vassal_gained = {
	on_actions = {
        TributeSystem_on_vassal_gained  #附庸解除朝贡
    }
}
TributeSystem_on_vassal_gained = {
	trigger = {
		NOT = { exists = scope:old_liege }
	}
	effect = {
		#朝贡国被附庸
		if = { 
			limit = {		
				scope:vassal = { is_tributary = yes }
			}
			unset_tributary = {
				TRIBUTARY = scope:vassal
			}
		}
		#宗主国被附庸
		if = { 
			limit = {
				scope:vassal = { has_tributaries = yes }
			}
			scope:vassal = {
				every_tributary = {
					unset_tributary = { TRIBUTARY = this }
				}
			}
		}
	}
}

three_year_playable_pulse = {
	on_actions = {
		TributeSystem_yearly_tribute_on_action #岁币和点数自然增长
	}
}

TributeSystem_yearly_tribute_on_action = {
	effect = {
		if = {
			limit = {
				has_character_modifier = offer_income_modifier
			}
			change_tribute_exp_effect = { EXP = var:offer_income }
			if = {
				limit = {
					exists = var:monthly_income_scale
					exists = var:yearly_income_recipient
				}
				pay_short_term_gold = {
					gold = {
						value = monthly_character_income
						multiply = var:monthly_income_scal
					}
					target = var:yearly_income_recipient
				}
			}				
		}
		if = {
			limit = {
				is_tributary = yes
			}
			save_scope_as = tributary
			suzerain ?= {
				save_scope_as = suzerain
			}
			if = {
				limit = {
					is_ai = yes
					scope:suzerain ?= { is_ai = yes }
				}
				random = {
					chance = 60
					tributary_change_tribute_exp_effect = { EXP = 25 }
				}
				random = {
					chance = 30
					tributary_change_tribute_exp_effect = { EXP = 20 }
				}
				random = {
					chance = 20
					tributary_change_tribute_exp_effect = { EXP = -10 }
				}
			}
			if = {
				limit = {
					exists = scope:suzerain
					scope:suzerain = { is_ai = yes has_trait = oe_suzerain }
				}
				scope:suzerain = {
					random = {
						chance = 50
						suzerain_change_tribute_exp_effect = { EXP = 20 }
					}
					random = {
						chance = 30
						suzerain_change_tribute_exp_effect = { EXP = 50 }
					}
					random = {
						chance = 20
						suzerain_change_tribute_exp_effect = { EXP = -30 }
					}	
				}
			}
		}
	}
}

#The initiator is ROOT, the other character is scope:target.
#For two-way relations, the on-action only fires on the initiator. Including if the corresponding relation is a different one (E.G., mentor vs. student)

#Each scripted relation has several associated on-actions:
#- root = the relation owner ("source" of the relation)
#- scope:target = the relation target
#on_set_relation_tributary = {
#}
on_set_relation_suzerain = {
	effect = {
		create_character_memory = {
			type = became_tributary
			participants = {
				new_relation = scope:target
			}
		}
		scope:target = {
			create_character_memory = {
				type = became_suzerain
				participants = {
					new_relation = root
				}
			}
		}
	}
}
#on_remove_relation_tributary = {
#}
on_remove_relation_suzerain = {
	effect = {
		create_character_memory = {
			type = stopped_being_tributary
			participants = {
				old_friend = scope:target
			}
		}
		scope:target = {
			create_character_memory = {
				type = stopped_being_suzerain
				participants = {
					old_friend = root
				}
			}
		}
	}
}

on_war_started = {
	on_actions = {
		#TributeSystem_on_war_started
	}
}

TributeSystem_on_war_started = {
	effect = {
		if = {
			limit = {
				scope:war = {
					NOT = {
						using_cb = free_from_tributary_cb
					}
				}
			}
			if = {
				limit = { scope:defender = { any_tributary = { this = scope:attacker } } }
				unset_tributary = {
					TRIBUTARY = scope:defender
				}
			}
			else_if = {
				limit = { scope:attacker = { suzerain = scope:defender } }
				unset_tributary = {
					TRIBUTARY = scope:attacker
				}
			}
			if = {
				limit = {
					scope:attacker = { has_character_modifier = offer_income_modifier }
				}
				scope:attacker = {
					remove_character_modifier = offer_income_modifier
					remove_variable = offer_income
				}
			}
			if = {
				limit = {
					scope:defender = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:attacker
					}
				}
				scope:defender = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
			if = {
				limit = {
					scope:attacker = {
						has_character_modifier = receive_income_modifier
						has_variable = receive_income_from
						var:receive_income_from = scope:defender
					}
				}
				scope:attacker = {
					remove_character_modifier = receive_income_modifier
					remove_variable = receive_income_from
				}
			}
		}
	}
}