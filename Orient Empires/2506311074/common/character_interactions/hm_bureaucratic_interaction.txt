hm_replace_the_bureaucratic_interaction = {  #替换官员
	category = interaction_category_admin
	common_interaction = no
	greeting = positive
	icon = vassal_claim_liege_title_interaction	
	desc = hm_replace_the_bureaucratic_interaction_desc
	#needs_recipient_to_open = yes
	#can_send_despite_rejection = yes

	ai_maybe = no

	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 65
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	#ai_frequency = 40
	is_shown = {	
		scope:actor = {
			is_oe_imperial_court_trigger = yes
			is_ai = no
		}
		scope:recipient = { #卸任官
			is_vassal_or_below_of = scope:actor
			is_ai = yes
			is_at_war = no
			is_oe_landed_bureaucrat_trigger = yes
		}
		NOT = { scope:recipient = scope:actor }
	}
	is_valid = {
	}

	has_valid_target_showing_failures_only = {
		scope:recipient = { #卸任官
			is_ai = yes
			is_at_war = no
			is_available_at_peace = yes
			is_oe_landed_bureaucrat_trigger = yes
		}
		scope:actor = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "can_replace_the_bureaucrat"
					has_realm_law_flag = can_replace_the_bureaucrat
				}
			}
		}
	}
	populate_recipient_list = {
		scope:actor = {
			#every_vassal_or_below = { #皇帝的其他文官
				#limit = {
					#highest_held_title_tier < scope:recipient.primary_title.tier
					#is_oe_landed_bureaucrat_trigger = yes
				#}
				#add_to_list = characters
			#}
			every_courtier = { #皇帝的廷臣
				limit = {
					is_ruler = no
					is_available_ai_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
			every_pool_character = { #首都角色池
				province = scope:actor.capital_province
				limit = {
					is_available_healthy_ai_adult = yes
					OR = {
						has_trait = lifestyle_bureaucrat
						has_trait = jinshi
						has_trait = zhuangyuan
					}
					OR = {
						location.province_owner = { top_liege = scope:actor.top_liege }
						location = scope:actor.top_liege.capital_province
					}
				}
				add_to_list = characters
			}
		}
		scope:recipient = { #地方幕僚
			every_courtier = {
				limit = {
					is_available_ai_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = { is_available_at_peace = yes }
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	can_send = {
		#scope:target = { exists = this }
	}

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}
	cost = {
		influence = {
			value = 0
			if = {
				limit = { exists = scope:recipient }
				scope:recipient ?= {
					if = {
						limit = {
							any_held_title = {
								tier = tier_kingdom
								is_landless_type_title = no
								is_oe_noble_family_title = no
							}
						}
						add = {
							every_held_title = {
								limit = {
									tier = tier_kingdom
									is_landless_type_title = no
									is_oe_noble_family_title = no
								}
								add = {
									value = scope:recipient.massive_influence_value
									multiply = 3
								}
							}
							desc = GOVERNOR_RESIGNATION_KINGDOM_COST
						}
					}
					else_if = {
						limit = {
							any_held_title = {
								tier = tier_duchy
								is_landless_type_title = no
								is_oe_noble_family_title = no
							}
						}
						add = {
							every_held_title = {
								limit = {
									tier = tier_duchy
									is_landless_type_title = no
									is_oe_noble_family_title = no
								}
								add = scope:recipient.massive_influence_value
							}
							desc = GOVERNOR_RESIGNATION_DUCHY_COST
						}
					}
					if = {
						limit = { house ?= { is_powerful_family = yes } }
						add = {
							value = scope:recipient.massive_influence_value
							desc = GOVERNOR_RESIGNATION_POWERFUL_COST
						}
					}
					else_if = {
						limit = { house ?= { is_dominant_family = yes } }
						add = {
							value = scope:recipient.monumental_influence_value
							desc = GOVERNOR_RESIGNATION_DOMINANT_COST
						}
					}
					if = {
						limit = {
							scope:actor = { is_ai = no } # This cost is only for players due to performance reasons
						}
						if = {
							limit = {
								scope:recipient.governor_efficiency != 1
							}
							add = {
								value = -100
								add = {
									value = scope:recipient.governor_efficiency
									multiply = 100
								}
								desc = GOVERNOR_RESIGNATION_EFFICIENCY_COST
							}
						}
					}
					if = {
						limit = {
							influence_level != 1
						}
						add = {
							value = {
								value = influence_level
								subtract = 1
							}
							multiply = 50
							desc = GOVERNOR_RESIGNATION_INFLUENCE_LEVEL_COST
						}
					}
				}
				scope:actor = {
					if = {
						limit = { has_revoke_title_reason = scope:recipient }
						multiply = {
							value = 0.5
							desc = temporal_condemnation_got_revoke_reason # Reused loc
						}
					}
				}
			}
		}
	}
	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0200
		}
	}
		
	on_accept = {
		if = {
			limit = { scope:secondary_recipient = { is_landed = yes } }
			scope:secondary_recipient = { oe_governor_resignation_title_transfer_effect = yes }
		}
		scope:recipient = {
			save_east_contract_effect = yes
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				limit = {
					tier < tier_empire
					tier >= tier_county
					is_oe_noble_family_title = no
					is_landless_type_title = no
				}
				change_title_holder = {
					holder = scope:secondary_recipient
					change = scope:change
				}
			}
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				change_liege = {
					liege = scope:secondary_recipient
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change

			add_opinion = {
				target = scope:actor
				modifier = demanded_my_resignation_opinion
			}
		}
		scope:actor = {
			add_courtier = scope:recipient 
		}
		scope:secondary_recipient = {
			change_government = celestial_government
			save_scope_as = lucky
			inter_east_contract_effect = yes
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:recipient.primary_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = { VASSAL = scope:recipient }
				title_revocation_stress_effect = { VASSAL = scope:recipient }
			}
		}
		war_for_revoke_effect = {
			LIEGE = scope:actor
			REBEL = scope:recipient
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		OR = {
			scope:recipient = {
				OR = {
					highest_held_title_tier = tier_barony
					is_bureau_government_trigger = yes
					is_imprisoned_by = scope:actor
				}				
			}
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
				scope:hook = yes
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions
		CorruptionSystem_corruption_retract_vassal_modifier = yes

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}
		
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 40
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
			desc = IS_BUREAU
		}
		modifier = {
			add = -40
			scope:recipient = {
				is_legion_government_trigger = yes
			}
			desc = AI_REFUSAL_IS_LEGION
		}
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:recipient.primary_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}
		modifier = {
			add = 60
			scope:actor = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
	  		}
		}
		modifier = {
			add = 100
			scope:actor = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}
	}

	# AI
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:recipient = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
				}
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:recipient.primary_title.tier = tier_county
			scope:recipient.primary_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:recipient.primary_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.current_military_strength < scope:recipient.current_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = {
				is_at_war = yes
			}
			scope:recipient = {
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
	}

}

hm_exchange_two_bannermen_interaction = {
	category = interaction_category_admin
	common_interaction = no

	send_name = SEND_PROPOSAL

	ai_maybe = no
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 60
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	desc = hm_exchange_two_bannermen_interaction_desc
	
	is_shown = {
		scope:actor = scope:recipient
		scope:actor = {
			OR = {
				government_has_flag = government_is_celestial
				government_has_flag = government_is_ulus
			}
			is_independent_ruler = yes
			highest_held_title_tier >= tier_duchy
		}
		scope:recipient = {
			is_milita_government_trigger = yes
		}
	}
	
	populate_actor_list = {
		scope:actor = {
			every_vassal = {
				limit = {
					highest_held_title_tier >= tier_county
					NOT = { has_trait = incapable }
					is_at_war = no 
				}
				add_to_list = characters
			}
		}
	}

	populate_recipient_list = {
		scope:recipient = {
			every_vassal = {
				limit = {
					highest_held_title_tier >= tier_county
					NOT = { has_trait = incapable }
					is_at_war = no
				}
				add_to_list = characters
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "can_exchange_two_bannermen"
					has_realm_law_flag = can_exchange_two_bannermen
				}
			}
		}
		trigger_if = {
			limit = {
				exists = scope:secondary_recipient
				exists = scope:secondary_actor
			}
			NOT = { scope:secondary_actor = scope:secondary_recipient }
			scope:secondary_actor.primary_title.tier = scope:secondary_recipient.primary_title.tier
			scope:secondary_actor = { is_milita_government_trigger = yes }
			scope:secondary_recipient = {  is_milita_government_trigger = yes }
		}
	}
	on_accept = {
		scope:secondary_recipient = {
			save_scope_as = recipient_vassal
			scope:secondary_actor = { save_scope_as = actor_vassal }
			scope:actor = { save_scope_as = our_liege }
		}
		scope:secondary_recipient = {
			every_held_title = {
				limit = {
					is_oe_noble_family_title = no
					is_landless_type_title = no
				}
				add_to_temporary_list = titles_recipient
			}
			every_vassal = {
				add_to_temporary_list = vassal_recipient
			}
		}
		scope:secondary_actor = {
			every_held_title = {
				limit = {
					is_oe_noble_family_title = no
					is_landless_type_title = no
				}
				add_to_temporary_list = titles_actor
			}
			every_vassal = {
				add_to_temporary_list = vassal_actor
			}
		}
		scope:secondary_recipient = {
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_in_list = {
				list = titles_recipient
				change_title_holder = {
					holder = scope:secondary_actor
					change = scope:change
				}
			}
			every_in_list = {
				list = vassal_recipient
				change_liege = {
					liege = scope:secondary_actor
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		
			change_government_milita_government_effect = yes
		}
		scope:secondary_actor = {
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_in_list = {
				list = titles_actor
				change_title_holder = {
					holder = scope:secondary_recipient
					change = scope:change
				}
			}
			every_in_list = {
				list = vassal_actor
				change_liege = {
					liege = scope:secondary_recipient
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			
			change_government_milita_government_effect = yes
		}	
	}
	on_decline = {
		if = {
			limit = {
				scope:recipient.primary_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = { VASSAL = scope:recipient }
				title_revocation_stress_effect = { VASSAL = scope:recipient }
			}
		}
		war_for_revoke_effect = {
			LIEGE = scope:actor
			REBEL = scope:recipient
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}
	cost = {
		prestige = {
			value = {
				if = {
					limit = {
						scope:secondary_actor.sub_realm_size > scope:secondary_recipient.sub_realm_size 
					}
					add = scope:secondary_actor.sub_realm_size
					subtract = scope:secondary_recipient.sub_realm_size
					multiply = 40
					floor = yes
				}
				if = {
					limit = {
						scope:secondary_actor.sub_realm_size <= scope:secondary_recipient.sub_realm_size 
					}
					add = scope:secondary_recipient.sub_realm_size
					subtract = scope:secondary_actor.sub_realm_size
					multiply = 40
					floor = yes
				}
			}
		}
		gold = {
			value = {
				if = {
					limit = {
						scope:secondary_actor.sub_realm_size > scope:secondary_recipient.sub_realm_size 
					}
					add = scope:secondary_actor.sub_realm_size
					subtract = scope:secondary_recipient.sub_realm_size
					multiply = 50
					floor = yes
				}
				if = {
					limit = {
						scope:secondary_actor.sub_realm_size <= scope:secondary_recipient.sub_realm_size 
					}
					add = scope:secondary_recipient.sub_realm_size
					subtract = scope:secondary_actor.sub_realm_size
					multiply = 50
					floor = yes
				}
			}
		}
	}
	auto_accept = {
		OR = {
			scope:recipient = {
				highest_held_title_tier = tier_barony
			}
	#scope:recipient = {
	#	is_bureau_government_trigger = yes
	#}
			scope:recipient = {
				is_imprisoned_by = scope:actor
			}
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
				scope:hook = yes
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}
	
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions
		CorruptionSystem_corruption_revoke_title_modifier = yes

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}
		
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 40
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
			desc = IS_BUREAU
		}
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:recipient.primary_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}
		modifier = {
			add = 60
			scope:actor = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
	  		}
		}
		modifier = {
			add = 200
			scope:actor = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}
	}

	ai_potential = {
		always = no
	}

	# AI
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:recipient = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
				}
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:recipient.primary_title.tier = tier_county
			scope:recipient.primary_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:recipient.primary_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.current_military_strength < scope:recipient.current_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = {
				is_at_war = yes
			}
			scope:recipient = {
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
	}
}

#####宰相人事权#####

oe_chancellor_replace_the_bureaucratic_interaction = {
	category = interaction_category_admin
	common_interaction = no
	greeting = positive
	icon = vassal_claim_liege_title_interaction	
	desc = hm_replace_the_bureaucratic_interaction_desc
	needs_recipient_to_open = yes

	ai_maybe = no
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 60
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	is_shown = {
		scope:actor.liege = {
			is_oe_imperial_government_trigger = yes
		}
		scope:actor = {
			is_ai = no
			OR = {
				has_trait = great_misit
				AND = {
					is_councillor = yes
					has_character_flag = in_imperial_council
					OR = {
						has_council_position = councillor_tongpingzhang
						has_council_position = councillor_shumishi
					}
				}
				AND = {
					exists = top_liege
					is_diarch_of_target = top_liege
				}
			}
		}
		scope:recipient = { 
			is_vassal_or_below_of = scope:actor.liege
			highest_held_title_tier <= tier_duchy
			is_oe_landed_bureaucrat_trigger = yes
		}
	}
	is_valid = {
		trigger_if = {
			limit = {
				scope:actor = {
					has_council_position = councillor_tongpingzhang
				}
			}
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
		}
		trigger_if = {
			limit = {
				scope:actor = {
					has_council_position = councillor_shumishi
				}
			}
			scope:recipient = {
				is_milita_government_trigger = yes
			}
		}
		scope:recipient = {
			NOT = {
				has_variable = bureaucrat_term_set
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			OR = {
				prestige_level >= 3
				AND = {
					is_diarch_of_target = liege
					liege = { has_diarchy_active_parameter = oe_chancellor_replace_the_bureaucratic_interaction }
				}
			}
		}
		scope:actor.liege = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "liege_can_replace_the_bureaucrat"
					has_realm_law_flag = can_replace_the_bureaucrat
				}
			}
		}
		NOT = {
			scope:recipient = {
				is_legion_government_trigger = yes
			}
		}	
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_recipient = { #候任官
			is_available_at_peace_adult = yes
			 #不在活动中
			OR = {
				has_trait = lifestyle_bureaucrat
				has_trait = jinshi
				has_trait = zhuangyuan
			}
			OR = {
				is_courtier_of = scope:actor
				AND = {
					top_liege = scope:actor
					OR = {
						is_landed = no
						highest_held_title_tier = tier_barony
					}
				}				
			}
		}
		scope:recipient = { #卸任官
			is_ai = yes
			is_at_war = no
			is_oe_landed_bureaucrat_trigger = yes
			is_available_at_peace = yes
		}
	}
	populate_recipient_list = {
		scope:actor.top_liege = {
			every_courtier_or_guest = { #皇帝的廷臣
				limit = {
					is_ruler = no
					target_is_liege_or_above = scope:actor
					is_available_ai_adult = yes
					is_male = yes
					 #不在活动中
				}
				add_to_list = characters
			}
		}
		scope:recipient = { #地方幕僚
			every_courtier_or_guest = {
				limit = {
					is_ruler = no
					target_is_liege_or_above = scope:actor
					is_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
		}
		every_pool_character = { #首都角色池
			province = scope:actor.capital_province
			limit = {
				is_available_healthy_ai_adult = yes
				OR = {
					has_trait = lifestyle_bureaucrat
					has_trait = jinshi
					has_trait = zhuangyuan
				}
				location = scope:actor.top_liege.capital_province
			}
			add_to_list = characters
		}
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}
	cost = {
		prestige = {
			value = 400
		}
	}
	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0200
		}
	}
		
	on_accept = {
		scope:recipient = {
			#governor_resignation_title_transfer_effect
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				limit = {
					is_oe_noble_family_title = no
					is_landless_type_title = no
					tier < tier_empire
					tier >= tier_county
				}
				change_title_holder = {
					holder = scope:secondary_recipient
					change = scope:change
				}
			}
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				change_liege = {
					liege = scope:secondary_recipient
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		scope:actor.liege = {
			add_courtier = scope:recipient 
		}
		scope:secondary_recipient = {
			change_government = celestial_government
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:recipient.primary_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = { VASSAL = scope:recipient }
				title_revocation_stress_effect = { VASSAL = scope:recipient }
			}
		}
		#war_for_revoke_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor.liege = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		OR = {
			scope:recipient = {
				highest_held_title_tier = tier_barony
			}
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
			scope:recipient = {
				is_imprisoned_by = scope:actor
			}
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
				scope:hook = yes
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions
		CorruptionSystem_corruption_revoke_title_modifier = yes

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}
		
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		modifier = {
			add = 40
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
			desc = IS_BUREAU
		}
		modifier = {
			add = 20
			scope:actor.liege = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			exists = scope:actor.liege.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}
		modifier = {
			add = 30
			scope:actor.liege = {
				has_claim_on = scope:recipient.primary_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}
		modifier = {
			add = 60
			scope:actor.liege = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor.liege = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
	  		}
		}
	}

	# AI
	#ai_targets = {
		#ai_recipients = vassals
	#}
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	#ai_potential = {
		#has_realm_law_flag = title_revocation_allowed
		#primary_title.tier > tier_county
	#}

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:recipient = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
				}
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:recipient.primary_title.tier = tier_county
			scope:recipient.primary_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:recipient.primary_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.current_military_strength < scope:recipient.current_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor.liege = {
				is_at_war = yes
			}
			scope:recipient = {
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
	}

}