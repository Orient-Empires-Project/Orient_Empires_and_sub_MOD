oe_demand_admin_interaction = {
	category = interaction_category_vassal
	icon = demand_admin_interaction

	ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	can_send_despite_rejection = yes
	ai_accept_negotiation = yes
	popup_on_receive = yes
	common_interaction = yes
	interface_priority = 90
	ai_targets = {
		ai_recipients = vassals
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 12

	desc = demand_admin_interaction_desc

	is_shown = {
		scope:actor = {
			government_has_flag = government_is_celestial
		}
		scope:recipient = {
			target_is_liege_or_above = scope:actor
			is_ai = yes
			is_ruler = yes
			NOR = {
				government_has_flag = government_is_celestial
				#government_has_flag = government_is_republic
			}
		}
		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
				}
			}
			scope:recipient = {
				highest_held_title_tier >= tier_county
			}
		}
	}

	cooldown_against_recipient = { years = 5 }

	is_valid_showing_failures_only = {
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = { is_at_war = no }
		scope:actor = { is_at_war = no }
		custom_tooltip = {
			text = cannot_take_overt_hostile_actions_against_diarch.tt
			NOT = { scope:recipient ?= scope:actor.diarch }
		}
		custom_tooltip = {
			text = demand_admin_tribal
			NOT = {
				scope:recipient = { government_has_flag = government_is_tribal }
			}
		}
		custom_tooltip = {
			text = head_of_faith_unable_to_change_government_desc
			NOT = {
				scope:recipient = { faith.religious_head ?= this }
			}
		}
		scope:actor = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "can_demand_celestial_government"
					has_realm_law_flag = can_demand_celestial_government
				}
			}
		}
	}

	# Offer hereditary boost
	send_option = {
		is_valid = {
			custom_tooltip = {
				text = demand_admin_hereditary_tt
				scope:recipient.house ?= {
					any_house_member = { count > 1 }
				}
			}
			custom_tooltip = {
				text = demand_admin_hereditary_exists_tt
				NOT = { exists = scope:recipient.primary_title.var:petition_house_rights }
			}
		}
		flag = hereditary
		localization = demand_admin_hereditary
	}
	#Spend influence
	send_option = {
		flag = influence
		is_valid = {
			scope:actor.influence >= massive_influence_value
		}
		localization = SPEND_INFLUENCE
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = { has_usable_hook = scope:recipient }
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	on_send = {
		scope:recipient = {
			primary_title = { save_scope_as = demanded_administration }
			trigger_event = {
				id = ep3_interactions_events.0005
				days = 5
			}
		}
	}

	on_accept = {
		show_as_tooltip = {
			change_to_celestial_interaction_effect = yes
		}
		scope:recipient = {
			if = {
				limit = { primary_title.tier = tier_kingdom }
				primary_title = { save_scope_as = title }
				set_administrative_kingdom_effect = yes
			}
		}
	}

	on_decline = {
		scope:recipient = { custom_tooltip = demand_admin_interaction_vassal_refuses }
	}

	ai_potential = {
		government_has_flag = government_is_celestial
		is_adult = yes
	}

	ai_will_do = {
		base = 100
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_county }
			gold >= 300
		}
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_duchy }
			gold >= 600
		}
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_kingdom }
			gold >= 2000
		}
	}

	ai_accept = {
		base = 0
		opinion_modifier = {
			trigger = {
				scope:recipient = {
					opinion = {
						target = scope:actor
						value < 0
					}
				}
			}
			opinion_target = scope:actor
			who = scope:recipient
			multiplier = 1
			desc = AI_OPINION_REASON
		}

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:recipient.primary_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -40
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
				add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
			  }
		}

		modifier = {
			add = 50
			desc = VASSAL_FAITHFUL
		}
		modifier = {
			add = -40
			trigger_if = {
				limit = {
					scope:recipient = { is_a_faction_member = yes }
				}
				scope:recipient = {
					joined_faction = { faction_target = scope:actor }
				}
			}
			desc = HAS_FACTIONS_TARGETING_ME
		}
		modifier = {
			add = scope:actor.learning
			desc = LIEGE_LEARING
		}
		modifier = {
			add = scope:actor.stewardship
			desc = LIEGE_STEWARDSHIP
		}
		modifier = {
			add = -30
			scope:recipient = {
				prowess >= 50
			}
			desc = VASSAL_PROWESS
		}
		modifier = {
			add = -20
			trigger_if = {
				limit = {
					scope:recipient.dynasty ?= {
						any_dynasty_member = {
							count >= 10
							is_alive = yes
						}
					}
				}
			}
			desc = TEN_ALIVE_DYNASTY_MEMBER
		}
		modifier = {
			add = -40
			scope:recipient = {
				is_powerful_vassal = yes
			}
			desc = VASSAL_IS_POWERFUL
		}
		# Government modifiers
		modifier = {
			add = -20
			scope:actor = {
				government_has_flag = government_is_celestial
			}
			desc = LIEGE_IS_IMPERIAL_REASON
		}
		modifier = {
			add = -100
			scope:recipient = {
				government_has_flag = government_is_feudal
			}
			desc = VASSAL_IS_FEUDAL_REASON
		}
		modifier = {
			add = -100
			scope:recipient = {
				is_legion_government_trigger = yes
			}
			desc = VASSAL_IS_legion_REASON
		}
	}
}

ulus_demand_admin_interaction = {
	category = interaction_category_vassal
	icon = demand_admin_interaction

	#ai_maybe = yes
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	can_send_despite_rejection = yes
	ai_accept_negotiation = yes
	popup_on_receive = yes
	common_interaction = yes
	interface_priority = 60
	ai_targets = {
		ai_recipients = vassals
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 12

	desc = ulus_demand_admin_interaction_desc

	is_shown = {
		scope:actor = {
			government_has_flag = government_is_ulus
		}
		scope:recipient = {
			target_is_liege_or_above = scope:actor
			is_ai = yes
			is_ruler = yes
			NOR = {
				government_has_flag = government_is_celestial
				government_has_flag = government_is_ulus
			}
		}
	}

	cooldown_against_recipient = { years = 5 }

	is_valid_showing_failures_only = {
		scope:recipient = { is_busy_in_events_localised = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
		scope:recipient = { is_at_war = no }
		scope:actor = { is_at_war = no }
		custom_tooltip = {
			text = cannot_take_overt_hostile_actions_against_diarch.tt
			NOT = { scope:recipient ?= scope:actor.diarch }
		}
		custom_tooltip = {
			text = demand_admin_tribal
			NOT = {
				scope:recipient = { government_has_flag = government_is_tribal }
			}
		}
		custom_tooltip = {
			text = head_of_faith_unable_to_change_government_desc
			NOT = {
				scope:recipient = { faith.religious_head ?= this }
			}
		}
		scope:actor = {
			trigger_if = {
				limit = { realm_law_use_tribal_authority = yes }
				custom_description = {
					text = has_lowest_tribal_authority
					subject = scope:target
					scope:target = {
						OR = {
							has_realm_law = tribal_authority_1
							has_realm_law = tribal_authority_2
							has_realm_law = tribal_authority_3
						}
					}
				}
			}
			trigger_else = {
				custom_description = {
					text = has_lowest_crown_authority
					subject = scope:target
					scope:target = {
						OR = {
							has_realm_law = crown_authority_1
							has_realm_law = crown_authority_2
							has_realm_law = crown_authority_3
						}
					}
				}
			}
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = { has_usable_hook = scope:recipient }
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	on_send = {
		scope:recipient = {
			primary_title = { save_scope_as = demanded_administration }
		}
	}

	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					government_has_flag = government_is_nomadic
				}
				change_government = ulus_government
			}
			else_if = {
				limit = {
					government_has_flag = government_is_tribal
				}
				change_government = feudal_government
			}
			else_if = {
				limit = {
					NOR = {
						government_has_flag = government_is_celestial
					}
				}
				change_government_legion_government_effect = yes
			}
		}
	}

	on_decline = {
		scope:recipient = { custom_tooltip = demand_admin_interaction_vassal_refuses }
	}

	ai_potential = {
		government_has_flag = government_is_ulus
		is_adult = yes
	}

	ai_will_do = {
		base = 100
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_county }
			gold >= 300
		}
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_duchy }
			gold >= 600
		}
		modifier = {
			factor = 0
			scope:recipient = { highest_held_title_tier >= tier_kingdom }
			gold >= 2000
		}
	}

	ai_accept = {
		base = 0
		opinion_modifier = {
			trigger = {
				scope:recipient = {
					opinion = {
						target = scope:actor
						value < 0
					}
				}
			}
			opinion_target = scope:actor
			who = scope:recipient
			multiplier = 1
			desc = AI_OPINION_REASON
		}

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county
				scope:recipient.primary_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:recipient.primary_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -40
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
				add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
			  }
		}

		modifier = {
			add = 50
			desc = VASSAL_FAITHFUL
		}
		modifier = {
			add = -40
			trigger_if = {
				limit = {
					scope:recipient = { is_a_faction_member = yes }
				}
				scope:recipient = {
					joined_faction = { faction_target = scope:actor }
				}
			}
			desc = HAS_FACTIONS_TARGETING_ME
		}
		modifier = {
			add = scope:actor.learning
			desc = LIEGE_LEARING
		}
		modifier = {
			add = scope:actor.stewardship
			desc = LIEGE_STEWARDSHIP
		}
		modifier = {
			add = -30
			scope:recipient = {
				prowess >= 50
			}
			desc = VASSAL_PROWESS
		}
		modifier = {
			add = -20
			trigger_if = {
				limit = {
					scope:recipient.dynasty ?= {
						any_dynasty_member = {
							count >= 10
							is_alive = yes
						}
					}
				}
			}
			desc = TEN_ALIVE_DYNASTY_MEMBER
		}
		modifier = {
			add = -40
			scope:recipient = {
				is_powerful_vassal = yes
			}
			desc = VASSAL_IS_POWERFUL
		}
		# Government modifiers
		modifier = {
			add = -20
			scope:actor = {
				government_has_flag = government_is_celestial
			}
			desc = LIEGE_IS_IMPERIAL_REASON
		}
		modifier = {
			add = -50
			scope:recipient = {
				government_has_flag = government_is_feudal
			}
			desc = VASSAL_IS_FEUDAL_REASON
		}
		modifier = {
			add = -50
			scope:recipient = {
				government_has_flag = government_is_nomadic
			}
			desc = VASSAL_IS_FEUDAL_REASON
		}
	}
}

oe_imperor_designate_heir_interaction = {
	category = interaction_category_vassal
	common_interaction = no
	greeting = positive
	desc = oe_imperor_designate_heir_interaction_desc
	icon = scroll_scales
	needs_recipient_to_open = yes
	ai_frequency = 0
	is_shown = {
		#always = no
		NOT = { scope:recipient = scope:actor }
		scope:actor = {
			is_oe_imperial_government_trigger = yes
		}
		scope:recipient = { #被替换官员
			is_vassal_or_below_of = scope:actor
			highest_held_title_tier >= tier_county
			is_bureau_government_trigger = yes
			is_oe_landed_bureaucrat_trigger = yes
			#is_available_for_activity_trigger = yes
		}
	}
	is_valid = {
		#scope:recipient = {
			#NOT = {
				#has_variable = bureaucrat_term_set
			#}
		#}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "can_designate_bureaucracy_successor"
					has_realm_law_flag = can_designate_bureaucracy_successor
				}
			}
		}
	}
	populate_recipient_list = {
		scope:actor = {
			#every_vassal_or_below = { #皇帝的其他文官
				#limit = {
					#highest_held_title_tier < scope:recipient.primary_title.tier
					#is_oe_landed_bureaucrat_trigger = yes
				#}
				#add_to_list = characters
			#}
			every_vassal = { #皇帝的廷臣
				limit = {
					is_ruler = no
					target_is_liege_or_above = scope:actor
					is_available_ai_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
		}
		scope:recipient = {
			every_courtier = {
				limit = {
					is_ruler = no
					target_is_liege_or_above = scope:actor
					is_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
		}
	}
	cost = {
		influence = {
			value = 300
		}
	}	
	on_accept = {
		scope:recipient = {
			send_interface_toast = {
				title = designate_heir_interaction_notification

				left_icon = scope:recipient					
				right_icon = scope:secondary_recipient

				set_designated_heir_unsafe = scope:secondary_recipient
			}
			set_variable = {
				name = oe_heir
				value = scope:secondary_recipient
			}
		}

			scope:recipient = {
				primary_title = {
					save_scope_as = target
				}
			}
			# Save the score value
			save_scope_value_as = {
				name = support_candidate_score
				value = {
					value = 0
					if = {
						limit = { exists = scope:target }
						add = {
							value = "scope:target.current_heir.appointment_candidate_score(scope:target)"
							multiply = 1.1
						}
						subtract = "scope:secondary_recipient.appointment_candidate_score(scope:target)"
					}
					min = 4 # We do this to prevent cases when the default score of the candidate is already much higher than that the heir
					multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
				}
			}
			if = {
				limit = {
					scope:support_candidate_score >= 100
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 25
				}
			}
			else_if = {
				limit = {
					scope:support_candidate_score >= 80
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 20
				}
			}
			else_if = {
				limit = {
					scope:support_candidate_score >= 60
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 15
				}
			}
			else_if = {
				limit = {
					scope:support_candidate_score >= 40
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 10
				}
			}
			else_if = {
				limit = {
					scope:support_candidate_score >= 20
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 5
				}
			}
			else_if = {
				limit = {
					scope:support_candidate_score >= 10
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 3
				}
			}
			else = {
				save_scope_value_as = {
					name = opinion_change_value
					value = 1
				}
			}

			# Update the score for the corresponding title
			scope:target = {
				change_appointment_investment = {
					target = scope:secondary_recipient
					investor = scope:actor
					value = scope:support_candidate_score
				}
				if = {
					limit = { appointment_interactions_recipient_is_suitable_co_emperor_trigger = yes }
					diarch_promoted_as_administrative_candidate_get_best_tooltip_effect = yes
				}
			}

			# Notify the supported character (unless they are the actor)
			scope:secondary_recipient ?= {
				if = {
					limit = {
						NOT = { this = scope:actor }
					}
					hidden_effect = {
						send_interface_message = {
							type = msg_candidacy_improved
							title = supported_candidacy_toast
							left_icon = scope:actor
							right_icon = scope:target
							show_as_tooltip = {
								scope:target = {
									change_appointment_investment = {
										target = scope:secondary_recipient
										investor = scope:actor
										value = scope:support_candidate_score
									}
								}
							}
						}
					}
				}
				if = {
					limit = {
						NOT = { house ?= scope:actor.house }
					}
					add_opinion = {
						modifier = supported_candidacy_opinion
						target = scope:actor
						opinion = scope:opinion_change_value
					}
					custom_tooltip = support_candidacy_success_reward_tt
				}
			}
	}
	
	ai_will_do = {
		base = 0
	}
	auto_accept = yes
}


oe_chancellor_designate_heir_interaction = {
	category = interaction_category_vassal
	common_interaction = no
	greeting = positive
	desc = oe_imperor_designate_heir_interaction_desc
	icon = scroll_scales
	needs_recipient_to_open = yes
	ai_frequency = 0
	is_shown = {
		NOT = { scope:recipient = scope:actor }
		NOT = { scope:recipient = scope:actor.liege }
		scope:actor = {
			is_ai = no
			OR = {
				has_trait = great_misit
				has_council_position = councillor_tongpingzhang
				has_council_position = councillor_shumishi
				AND = {
					exists = top_liege
					is_diarch_of_target = scope:actor.top_liege
				}
			}
		}
		scope:recipient = { 
			is_vassal_or_below_of = scope:actor.liege
			highest_held_title_tier >= tier_county
			government_has_flag = government_is_celestial
			is_oe_landed_bureaucrat_trigger = yes
			is_landed = yes
			is_available_for_activity_trigger = yes
		}
	}
	is_valid = {
		trigger_if = {
			limit = {
				scope:actor = {
					has_council_position = councillor_tongpingzhang
				}
			}
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
		}
		trigger_if = {
			limit = {
				scope:actor = {
					has_council_position = councillor_shumishi
				}
			}
			scope:recipient = {
				is_milita_government_trigger = yes
			}
		}
		scope:recipient = {
			NOT = {
				has_variable = bureaucrat_term_set
			}
		}
	}
	populate_actor_list = {
		scope:actor.liege = {
			#every_vassal_or_below = {
				#limit = {
					#highest_held_title_tier < scope:recipient.primary_title.tier
					#liege = { government_has_flag = government_is_celestial }
					#is_oe_landed_bureaucrat_trigger = yes
				#}
				#add_to_list = characters
			#}
			every_courtier = {
				limit = {
					is_ruler = no
					target_is_liege_or_above = scope:actor.liege
					is_adult = yes
					is_male = yes
				}
				add_to_list = characters
			}
		}
		#scope:recipient = {
			#every_courtier = {
				#limit = {
					#is_ruler = no
					#target_is_liege_or_above = scope:actor.liege
					#is_adult = yes
					#is_male = yes
				#}
				#add_to_list = characters
			#}
		#}
		every_pool_character = { #首都角色池
			limit = {
				is_available_healthy_ai_adult = yes
				OR = {
					has_trait = lifestyle_bureaucrat
					has_trait = jinshi
					has_trait = zhuangyuan
				}
				location = scope:actor.top_liege.capital_province
			}
			add_to_list = characters
		}
	}
	is_valid_showing_failures_only = {
		scope:actor.liege = {
			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "liege_can_designate_bureaucracy_successor"
					has_realm_law_flag = can_designate_bureaucracy_successor
				}
			}
		}
	}
	cost = {
		influence = {
			value = 300
		}
	}		
	on_accept = {
		scope:recipient = {
			send_interface_toast = {
				title = designate_heir_interaction_notification

				left_icon = scope:recipient					
				right_icon = scope:secondary_actor

				set_designated_heir_unsafe = scope:secondary_actor
			}
			set_variable = {
				name = oe_heir
				value = scope:secondary_actor
			}
		}
	}
	
	ai_will_do = {
		base = 30
	}
	auto_accept = yes
}

set_bureaucratic_term_interaction = {  #
	category = interaction_category_vassal
	common_interaction = no
	greeting = positive
	icon = vassal_claim_liege_title_interaction	
	desc = set_bureaucratic_term_interaction_desc
	needs_recipient_to_open = yes
	ai_frequency = 900
	ai_maybe = no
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 60
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	cooldown_against_recipient = { years = 10 } 
	is_shown = {	
		scope:actor = {
			is_oe_imperial_court_trigger = yes
			
			is_ai = no
			is_available_adult = yes
		}
		scope:recipient = { 
			is_vassal_or_below_of = scope:actor
			is_oe_landed_bureaucrat_trigger = yes
			is_oe_available_ai_at_peace = yes
		}
		NOT = { scope:recipient = scope:actor }
	}
	is_valid = {

	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_capable_adult = yes
			is_imprisoned = no

			trigger_if = {
				limit = { is_oe_imperial_court_trigger = yes }
				custom_description = {
					text = "can_set_bureaucratic_term"
					has_realm_law_flag = can_set_bureaucratic_term
				}
			}
		}
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}
	cost = {
		influence = {
			value = 100
		}
	}	
		
	on_accept = {
		scope:actor = {
			trigger_event = east_contract.0006
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:recipient.primary_title.tier != tier_barony
			}
			scope:actor = {
				revocation_tyranny_effect = { VASSAL = scope:recipient }
				title_revocation_stress_effect = { VASSAL = scope:recipient }
			}
		}
		#war_for_revoke_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		OR = {
			scope:recipient = {
				OR = {
					is_bureau_government_trigger = yes
					is_imprisoned_by = scope:actor
				}				
			}
			custom_description = {
				text = "spending_hook"
				subject = scope:actor
				object = scope:recipient
				scope:hook = yes
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions
		#CorruptionSystem_corruption_retract_vassal_modifier = yes
		modifier = {
			scope:hook = yes
			add = 60
			desc = SCHEME_WEAK_HOOK_USED
		}
		modifier = {
			add = 40
			scope:recipient = {
				is_bureau_government_trigger = yes
			}
			desc = IS_BUREAU
		}
		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:actor.primary_title.title_capital_county
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}
		modifier = {
			add = 60
			scope:actor = {
				has_title = title:e_celestia
			}
			desc = AI_IMPERIAL_GOVEMENT_CAN_REVOKE_TITLE
		}
	}

	# AI
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_potential = {
		always = no
	}

	ai_will_do = {
		base = -1000
	}

}


sent_to_bureaucracy_pool_interaction = {
	category = interaction_category_diplomacy
	icon = guest

	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:recipient = { is_foreign_court_or_pool_guest = yes } }
				desc = kick_from_court_interaction_desc_guest
			}
			desc = sent_to_bureaucracy_pool_interaction_desc
		}
	}

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			is_oe_landed_bureaucrat_trigger = yes
			is_ai = no
		}
		scope:recipient = {
			OR = {
				is_courtier_of = scope:actor
				is_pool_guest_of = scope:actor
			}
		}
	}

	cost = {
		prestige = {
			if = {
				limit = {
					scope:recipient = {
						any_traveling_family_member = {
							count = all
							is_lowborn = yes
						}
					}
				}
				value = minor_prestige_value
			}
			else = {
				value = medium_prestige_value
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			oe_kick_from_court_validity_trigger = yes
			trigger_if = {
				limit = { 
					top_liege.faith = { has_doctrine_parameter = women_cannot_be_granted_titles }
				}
				is_female = no
			}
			trigger_if = {
				limit = { 
					top_liege.faith = { has_doctrine_parameter = men_cannot_be_granted_titles }
				}
				is_male = no
			}
			custom_description = {
				text = "kick_from_court_interaction_travelling_family_invalid"
				subject = scope:recipient
				NOT = {
					any_traveling_family_member = {
						NOT = { this = scope:recipient }
						oe_kick_from_court_validity_trigger = no
					}
				}
			}
		}
	}
	
	on_accept = {
		scope:actor = {
			stress_impact = {
				gregarious = minor_stress_impact_gain
				compassionate = minor_stress_impact_gain
			}
			
			hidden_effect = {
				send_interface_message = {
					type = event_generic_neutral
					title = msg_kicked_courtier_from_court_interaction_title
					
					right_icon = scope:recipient

					show_as_tooltip = {
						scope:actor = {
							remove_courtier_or_guest = scope:recipient
						}
					}

			   		#Remove them as guardian/ward for any courtier
			   		if = {
						limit = {
							any_courtier = {
								has_relation_guardian = scope:recipient
							}
						}
						every_courtier = {
							limit = {
								has_relation_guardian = scope:recipient
							}
							save_scope_as = ward
							scope:recipient = { remove_relation_ward = scope:ward }
							if = {
								limit = {
									NOT = { host = liege }
								}
								return_to_court = yes
							}
							guardian_remove_opinion_effect = {
								GUARDIAN = scope:recipient
								WARD = this
								WARD_LIEGE = scope:actor
							}
						}
						scope:recipient = { trigger_event = char_interaction.0090 }
					}
					if = {
						limit = {
							any_courtier = {
								has_relation_ward = scope:recipient
							}
						}
						random_courtier = {
							limit = {
								has_relation_ward = scope:recipient
							}
							save_scope_as = guardian

							send_interface_message = {
								type = event_generic_neutral
								title = remove_guardian_interaction_notification
								left_icon = scope:recipient
								right_icon = scope:guardian

								scope:guardian = {
									remove_relation_ward = scope:recipient
									if = {
										limit = {
											NOT = { host = liege }
										}
										return_to_court = yes
									}
									guardian_remove_opinion_effect = {
										GUARDIAN = this
										WARD = scope:recipient
										WARD_LIEGE = scope:actor
									}
								}
							}
						}
					}
				}
				scope:recipient = {
					move_to_pool_at = scope:actor.top_liege.capital_county.title_province
				}
			}

			#To be able to send a cohesive interface message AND show a good tooltip
			show_as_tooltip = {
				#Remove them as guardian for any child
		   		if = {
					limit = {
						any_courtier = {
							has_relation_guardian = scope:recipient
						}
					}
					every_courtier = {
						limit = {
							has_relation_guardian = scope:recipient
						}
						save_scope_as = ward
						scope:recipient = { remove_relation_ward = scope:ward }
						if = {
							limit = {
								NOT = { host = liege }
							}
							return_to_court = yes
						}
						guardian_remove_opinion_effect = {
							GUARDIAN = scope:recipient
							WARD = this
							WARD_LIEGE = scope:actor
						}
					}
				}

				#Remove them as ward of any courtier
				if = {
					limit = {
						any_courtier = {
							has_relation_ward = scope:recipient
						}
					}
					random_courtier = {
						limit = {
							has_relation_ward = scope:recipient
						}
						remove_relation_ward = scope:recipient
						if = {
							limit = {
								NOT = { host = liege }
							}
							return_to_court = yes
						}
						guardian_remove_opinion_effect = {
							GUARDIAN = this
							WARD = scope:recipient
							WARD_LIEGE = scope:actor
						}
					}
				}
			}
		}

		scope:recipient = {
			every_traveling_family_member = {
				add_to_temporary_list = kicked_family
			}
		}
#
#		every_in_list = {
#			list = kicked_family
#			#Kicks, adds opinions, adds people to kicked_relatives_list
#			kick_from_court_interaction_effect = yes
#		}

#		if = {
#			limit = {
#				any_in_list = {
#					list = kicked_relatives_list
#					is_alive = yes
#				}
#			}
#			every_in_list = {
#				list = kicked_relatives_list
#				custom = all_close_family_members_of_kicked_characters
#				add_opinion = {
#					modifier = kicked_relative_from_court
#					target = scope:actor
#				}
#			}
#		}
	}
	
	auto_accept = yes
}

#送去对方府衙历练
sent_to_bureaucracy_courtier_interaction = {
	category = interaction_category_vassal
	icon = demand_admin_interaction
	target_type = title
	target_filter = recipient_de_jure_titles

	custom_character_sort = { governor_efficiency candidate_score }

	populate_recipient_list = {
		scope:actor = {
			house ?= {
				every_house_member = {
					limit = {
						is_independent_ruler = no
						is_landed = no
						NOT = { government_has_flag = government_is_landless_adventurer }
						any_valid_title_to_grant_trigger = {
							CANDIDATE = this
							TOP_LIEGE = scope:actor.top_liege
						}
					}
					add_to_list = characters
				}
			}
			if = {
				limit = { primary_title.tier >= tier_duchy }
				every_courtier_or_guest = {
					limit = {
						is_independent_ruler = no
						allows_imperial_bureaucracy = yes
						top_liege = scope:actor.top_liege
						any_valid_title_to_grant_trigger = {
							CANDIDATE = this
							TOP_LIEGE = scope:actor.top_liege
						}
					}
					add_to_list = characters
				}
			}
		}
	}

	can_be_picked_title = {
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			is_appointment_valid_trigger = {
				TITLE = scope:target
				CANDIDATE = scope:secondary_recipient
				TOP_LIEGE = scope:recipient
			}
		}
	}

	has_valid_target_showing_failures_only = {
		scope:target = {
			tier >= tier_county
			exists = holder
			is_oe_noble_family_title = no
			holder = scope:recipient
		}
	}

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			is_ai = no
			allows_imperial_bureaucracy = yes		
		}
		OR = {
			scope:recipient = {
				is_governor = yes
				is_independent_ruler = no
				allows_imperial_bureaucracy = yes
				top_liege = scope:actor.top_liege
			}
			scope:recipient = { is_councillor_of = scope:actor.top_liege }
		}
		
	}

	is_valid_showing_failures_only = {
		#trigger_if = {
			#limit = { exists = scope:secondary_recipient }
			#any_valid_title_to_grant_trigger = {
				#CANDIDATE = scope:secondary_recipient
				#TOP_LIEGE = scope:recipient
			#}
		#}
	}

	can_send = {
		trigger_if = {
			limit = {
				OR = {
					scope:as_much_as_needed_influence_option = yes
					scope:major_influence_option = yes
					scope:medium_influence_option = yes
				}
			}
			scope:actor = {
				custom_tooltip = {
					text = support_candidacy_cap_reached_tt
					succession_appointment_score_invested = {
						title = scope:target
						candidate = scope:secondary_recipient
						value < scope:actor.appointment_investment_cap
					}
				}
			}
			
			# Check if the target is available or if they have decided to not compete for the throne
			trigger_if = {
				limit = {
					exists = scope:target
					scope:target.tier = scope:recipient.highest_held_title_tier
				}
				scope:secondary_recipient = {
					custom_tooltip = {
						text = admin_renounce_throne_desc
						NOR = {
							has_character_modifier = ep3_admin_renounce_throne_personal
							house ?= { has_house_modifier = ep3_admin_renounce_throne_house }
						}
					}
				}
			}
		}
	}

	redirect = {
		#scope:recipient = {
			#if = {
				#limit = {
					#is_courtier_of = scope:actor
				#}
				#save_scope_as = secondary_recipient
				#scope:actor.top_liege = {
					#save_scope_as = recipient
				#}
			#}
		#}
	}

	auto_accept = yes

	send_option = {
		flag = as_much_as_needed_influence_option
		localization = "as_much_as_needed_influence_option_desc"
	}
	send_option = {
		flag = major_influence_option
		localization = "major_influence_option_desc"
	}
	send_option = {
		flag = medium_influence_option
		localization = "medium_influence_option_desc"
		starts_enabled = { always = yes }
	}
	send_option = {
		flag = medium_influence_loss_option
		localization = "medium_influence_loss_option_desc"
	}
	send_option = {
		flag = major_influence_loss_option
		localization = "major_influence_loss_option_desc"
	}

	cost = {
		influence = {
			# Base cost
			switch = {
				trigger = yes
				scope:as_much_as_needed_influence_option = {
					add = {
						if = {
							limit = { exists = scope:secondary_recipient }
							value = {
								add = {
									value = 50
									multiply =  scope:recipient.bureaucrat_title_rank_value
								}
								min = 20 # We do this to prevent cases when the default score of the candidate is already much higher than that the heir
							}
						}
						else = { value = 20 } # Show the default cost if there is no candidate selected yet
						desc = BASE
					}
				}
				scope:major_influence_option = {
					add = {
						value = appointment_major_influence_cost
						desc = BASE
					}
				}
				scope:medium_influence_option = {
					add = {
						value = appointment_medium_influence_cost
						desc = BASE
					}
				}
				scope:medium_influence_loss_option = {
					add = {
						value = appointment_medium_influence_cost
						desc = BASE
					}
				}
				scope:major_influence_loss_option = {
					add = {
						value = appointment_major_influence_cost
						desc = BASE
					}
				}
			}

			save_temporary_value_as = calculated_base_cost

			# Gender modifiers
			if = {
				limit = {
					scope:secondary_recipient ?= {
						top_liege = { has_realm_law = male_preference_law }
						is_female = yes
					}
				}
				if = {
					limit = {
						OR = {
							scope:medium_influence_loss_option = yes
							scope:major_influence_loss_option = yes
						}
					}
					add = {
						value = scope:calculated_base_cost
						multiply = -0.5
						desc = male_preference_law
					}
				}
				else = {
					add = { # Double the (base) cost
						value = scope:calculated_base_cost
						desc = male_preference_law
					}
				}
			}
			else_if = {
				limit = {
					scope:secondary_recipient ?= {
						top_liege = { has_realm_law = female_preference_law }
						is_female = no
					}
				}
				if = {
					limit = {
						OR = {
							scope:medium_influence_loss_option = yes
							scope:major_influence_loss_option = yes
						}
					}
					add = {
						value = scope:calculated_base_cost
						multiply = -0.5
						desc = female_preference_law
					}
				}
				else = {
					add = { # Double the (base) cost
						value = scope:calculated_base_cost
						desc = female_preference_law
					}
				}
			}


			# Local bonuses
			if = {
				limit = {
					scope:actor = {
						domicile ?= {
							domicile_location.county = {
								scope:target ?= { is_de_jure_liege_or_above_target = prev }
							}
						}
					}
					scope:target ?= { tier < tier_empire }
				}
				add = {
					value = scope:calculated_base_cost
					multiply = {
						value = -0.25
						if = {
							limit = { # Increase the bonus if you have the "office" estate upgrade
								scope:actor = {
									domicile ?= { has_domicile_parameter = estate_local_theme_cost_reduction }
								}
							}
							add = estate_local_theme_cost_reduction_value
						}
					}
					desc = estate_location_in_area
				}
			}

			# Bureaucracy Legacy Perk Discount
			if = {
				limit = {
					scope:actor.dynasty ?= { has_dynasty_perk = ep3_administrative_legacy_2 }
				}
				add = {
					value = scope:calculated_base_cost
					multiply = -0.1
					desc = "[GetDynastyPerk('ep3_administrative_legacy_2').GetName]"
				}
			}

			# A dominant family gets to spend less influence
			if = {
				limit = {
					scope:actor.house ?= { is_dominant_family = yes }
				}
				add = {
					value = scope:calculated_base_cost
					multiply = -0.5
					desc = "[dominant_family|E]"
				}
			}
		}
	}

	localization_values = {
		AS_MUCH_AS_NEEDED_INFLUENCE_OPTION = scope:actor.appointment_score_max_tt_value
		MAJOR_INFLUENCE_OPTION = scope:actor.appointment_score_major_tt_value
		MEDIUM_INFLUENCE_OPTION = scope:actor.appointment_score_medium_tt_value
		MEDIUM_INFLUENCE_LOSS_OPTION = scope:actor.appointment_score_medium_loss_tt_value
		MAJOR_INFLUENCE_LOSS_OPTION = scope:actor.appointment_score_major_loss_tt_value
	}

	on_accept = {
		if = {
			limit = {
				scope:recipient = {
					is_landed = no
					is_councillor_of = scope:actor.top_liege
				}			
			}
			scope:secondary_recipient = {
				set_employer = scope:actor.top_liege
			}
		}
		else = {
			scope:secondary_recipient = {
				set_employer = scope:recipient
			}
		}
		switch = {
			trigger = yes
			scope:as_much_as_needed_influence_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = 0
						if = {
							limit = { exists = scope:target }
							add = {
								value = 20
								multiply =  scope:recipient.bureaucrat_title_rank_value
							}
						}
						min = 4 # We do this to prevent cases when the default score of the candidate is already much higher than that the heir
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				if = {
					limit = {
						scope:support_candidate_score >= 100
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 25
					}
				}
				else_if = {
					limit = {
						scope:support_candidate_score >= 80
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 20
					}
				}
				else_if = {
					limit = {
						scope:support_candidate_score >= 60
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 15
					}
				}
				else_if = {
					limit = {
						scope:support_candidate_score >= 40
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 10
					}
				}
				else_if = {
					limit = {
						scope:support_candidate_score >= 20
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 5
					}
				}
				else_if = {
					limit = {
						scope:support_candidate_score >= 10
					}
					save_scope_value_as = {
						name = opinion_change_value
						value = 3
					}
				}
				else = {
					save_scope_value_as = {
						name = opinion_change_value
						value = 1
					}
				}
			}
			scope:major_influence_option = {
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_major_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 10
				}
			}
			scope:medium_influence_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_medium_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = 5
				}
			}
			scope:medium_influence_loss_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_medium_loss_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = -10
				}
			}
			scope:major_influence_loss_option = {
				# Save the score value
				save_scope_value_as = {
					name = support_candidate_score
					value = {
						value = appointment_score_major_loss_value
						multiply = scope:actor.appointment_score_interaction_multiplier_modifiers_value
					}
				}
				save_scope_value_as = {
					name = opinion_change_value
					value = -20
				}
			}
		}

		# Update the score for the corresponding title
		scope:target = {
			change_appointment_investment = {
				target = scope:secondary_recipient
				investor = scope:actor
				value = scope:support_candidate_score
			}
			if = {
				limit = { appointment_interactions_recipient_is_suitable_co_emperor_trigger = yes }
				diarch_promoted_as_administrative_candidate_get_best_tooltip_effect = yes
			}
		}

		if = {
			limit = {
				OR = {
					scope:as_much_as_needed_influence_option = yes
					scope:major_influence_option = yes
					scope:medium_influence_option = yes
				}
			}
			# Notify the supported character (unless they are the actor)
			scope:secondary_recipient ?= {
				if = {
					limit = {
						NOT = { this = scope:actor }
					}
					hidden_effect = {
						send_interface_message = {
							type = msg_candidacy_improved
							title = supported_candidacy_toast
							left_icon = scope:actor
							right_icon = scope:target
							show_as_tooltip = {
								scope:target = {
									change_appointment_investment = {
										target = scope:secondary_recipient
										investor = scope:actor
										value = scope:support_candidate_score
									}
								}
							}
						}
					}
				}
				if = {
					limit = {
						NOT = { house ?= scope:actor.house }
					}
					add_opinion = {
						modifier = supported_candidacy_opinion
						target = scope:actor
						opinion = scope:opinion_change_value
					}
					custom_tooltip = support_candidacy_success_reward_tt
				}
			}
		}
		else = {
			# Notify the harmed character (unless they are the actor)
			scope:secondary_recipient ?= {
				if = {
					limit = { this != scope:actor }
					hidden_effect = {
						send_interface_message = {
							type = msg_candidacy_harmed
							title = harmed_candidacy_toast
							left_icon = scope:actor
							right_icon = scope:target
							show_as_tooltip = {
								scope:target = {
									change_appointment_investment = {
										target = scope:secondary_recipient
										investor = scope:actor
										value = scope:support_candidate_score
									}
								}
							}
						}
					}
					add_opinion = {
						modifier = harmed_candidacy_opinion
						target = scope:actor
						opinion = scope:opinion_change_value
					}
				}
			}
		}
	}
}




callback_to_court_interaction = {
	category = interaction_category_diplomacy
	icon = guest
	desc = invite_to_court_interaction_desc

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			culture = { has_cultural_parameter = patriarch_society }
		}
		scope:actor = { is_ai = no }
		scope:recipient = {
			culture = { has_cultural_parameter = patriarch_society }
			#is_child_of = scope:actor
			is_close_family_of = scope:actor
			is_hostage = no
			NOR = {
				is_courtier_of = scope:actor
				is_foreign_court_guest = yes
				AND = {
					exists = host
					host = scope:actor
				}
				highest_held_title_tier > tier_barony
			}
		}
	}

	cost = {
		prestige = {
			if = {
				limit = {
					scope:recipient = {
						any_traveling_family_member = {
							count = all
							is_lowborn = yes
						}
					}
				}
				value = minor_prestige_value
			}
			else = {
				value = medium_prestige_value
			}
		}
	}

	is_valid_showing_failures_only = {
	}
	
	#Pay som gold to persuade a wandering character to come to your court
	send_option = {
		is_shown = {
			exists = scope:recipient
			scope:recipient = {
				is_pool_guest = no
				location.province_owner = {
					OR = {
						any_liege_or_above = { this = scope:actor }
						this = scope:actor
					}
				}
				NOR = {
					has_relation_rival = scope:actor
					#exists = liege
					#is_child_of = scope:actor
					has_character_modifier = lust_for_adventure
				}
			}
		}
		flag = cover_travel_expenses
		localization = COVER_TRAVEL_EXPENSES
	}

	on_accept = {
		hidden_effect = {
			if = {
				limit = {
					exists = scope:recipient.liege
				}
				scope:recipient.liege = {
					send_interface_message = {
						type = event_generic_neutral
						title = msg_courtier_left_court_interaction_title
						
						right_icon = scope:recipient

						show_as_tooltip = {
							remove_courtier_or_guest = scope:recipient
						}
					}
				}
			}
			if = {
				limit = {
					scope:recipient = {
						highest_held_title_tier = tier_barony
					}
				}
				scope:recipient = {
					oe_governor_resignation_title_transfer_effect = yes
				}
			}
		}
		
		scope:actor = {
			send_interface_message = {
				type = event_generic_neutral
				title = invite_to_court_interaction_notification
				right_icon = scope:recipient

				scope:recipient = {
					every_traveling_family_member = {
						scope:actor = { add_courtier = prev }
						hidden_effect = {
							return_to_court = yes
						}
					}
				}

				if = {
					limit = { always = scope:hook }
					scope:actor = {
						use_hook = scope:recipient
					}
				}

				scope:actor = {
					stress_impact = {
						shy = minor_stress_impact_gain
					}
				}
			}
		}
		
		
		if = {
			limit = { always = scope:cover_travel_expenses }
			scope:actor = {
				pay_short_term_gold = {
					gold = {
						value = bribe_value
						multiply = 0.5
					}
					target = scope:recipient
				}
				stress_impact = {
					greedy = minor_stress_impact_gain
				}
			}
		}
	}

	ai_accept = {
 		base = -50

 		#Opinions
 		opinion_modifier = {
 			trigger = {
 				exists = liege
 				is_courtier_of = liege
 			}
 			opinion_target = liege
 			multiplier = -0.5
 			step = 5
 			max = 25
 		}
 		opinion_modifier = {
 			opinion_target = scope:actor
 			multiplier = 0.5
 			step = 5
 			max = 25
 		}

 		#Current roles
 		modifier = {
 			is_knight = yes
 			add = -20
 			desc = AI_MY_LIEGES_KNIGHT
 		}
 		modifier = {
 			is_commanding_army = yes
 			add = -30
 			desc = AI_MY_LIEGES_COMMANDER
 		}
 		modifier = {
 			is_councillor = yes
 			add = -40
 			desc = AI_ON_THE_COUNCIL
 		}
		
		modifier = {		
			trigger = { scope:recipient = { has_court_position = court_physician_court_position } }			
 			add = -20
 			desc = AI_COURT_PHYSICIAN
 		}

 		#Relations & relatives (with actor)
 		modifier = {
 			has_relation_lover = scope:actor
 			add = 100
 			desc = AI_YOUR_LOVER
 		}

 		modifier = {
 			has_relation_friend = scope:actor
 			add = 75
 			desc = AI_YOUR_FRIEND
 		}

 		modifier = {
 			is_child_of = scope:actor
 			add = 160
 			desc = AI_YOUR_CHILD
 		}

 		modifier = {
 			this.dynasty.dynast = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_DYNAST
 		}

 		modifier = {
 			this.house.house_head = scope:actor
 			add = 30
 			desc = AI_YOU_ARE_THE_HOUSE_HEAD
 		}

 		modifier = {
 			NOT = { is_child_of = scope:actor }
 			is_close_family_of = scope:actor
 			add = 75
 			desc = AI_YOUR_RELATIVE
 		}

 		modifier = {
 			is_spouse_of = scope:actor
 			add = 160
 			desc = AI_YOUR_SPOUSE
 		}

 		#Relations & relatives (with host)
 		modifier = {
 			exists = liege
 			has_relation_lover = liege
 			add = -100
 			desc = AI_THEIR_LOVER
 		}

 		modifier = {
 			exists = liege
 			has_relation_friend = liege
 			add = -75
 			desc = AI_THEIR_FRIEND
 		}

 		modifier = {
 			exists = liege
 			is_child_of = liege
 			add = -100
 			desc = AI_THEIR_CHILD
 		}

 		modifier = {
 			exists = liege
 			NOT = { is_child_of = liege }
 			is_close_family_of = liege
 			add = -75
 			desc = AI_THEIR_RELATIVE
 		}

 		#Family (at location)
 		modifier = {
 			exists = location
 			any_consort_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_SPOUSE
 			add = -100
 		}

 		modifier = {
 			exists = location
 			any_child_not_in_traveling_family_trigger = yes
 			desc = AI_LEAVING_MY_CHILD
 			add = -100
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_MATRILINIALLY
 			is_married = yes
 			is_male = yes
 			any_spouse = {
 				matrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -50
 			desc = AI_MARRIED_PATRILINIALLY
 			is_married = yes
 			is_female = yes
 			any_spouse = {
 				patrilinear_marriage = yes
 				host = scope:recipient.host
 			}
 		}

 		modifier = {
 			add = -50
 			desc = AI_INSPIRED
 			exists = inspiration
			inspiration = {
				NOT = {
					exists = inspiration_sponsor
				}
			}
 		}

 		modifier = {
 			add = -500
 			desc = AI_SPONSORED_INSPIRATION
 			exists = inspiration
			inspiration = {
				exists = inspiration_sponsor
			}
 		}

 		modifier = {
 			add = -500
 			desc = AI_WANDERLUST
			is_child_of = scope:actor
 			has_character_modifier = lust_for_adventure
 		}
		
		#Wandering characters (who aren't doing anything else)
		modifier = {
 			add = {
				value = 10
				add = scope:actor.diplomacy
				
				if = {
					limit = {
						faith = scope:actor.faith
					}
					add = 10
				}
				else_if = {
					limit = {
						faith = { #Same religion - But faith should not be considered Hostile or Evil
							religion = scope:actor.faith.religion
							faith_hostility_level = {
								target = scope:actor.faith
								value < 2
							}
						}
					}
					add = 5
				}
				if = {
					limit = {
						culture = scope:actor.culture
					}
					add = 10
				}
				else_if = {
					limit = {
						culture = {
							has_same_culture_heritage = scope:actor.culture
						}
					}
					add = 5
				}
				if = {
					limit = {
						OR = {
							has_trait = content
							has_trait = lazy
							has_trait = trusting
						}
					}
					add = 10
				}
			}
 			desc = AI_CAN_BE_PERSUADED_TO_STAY
			
			is_pool_guest = no
			location.province_owner = {
				OR = {
					any_liege_or_above = { this = scope:actor }
					this = scope:actor
				}
			}
			NOR = {
				has_relation_rival = scope:actor
				exists = liege
				is_child_of = scope:actor
				has_character_modifier = lust_for_adventure
			}
 		}
		
		modifier = {
			add = {
				value = 20
				if = {
					limit = {
						has_trait = greedy
					}
					multiply = 1.5
				}
				else_if = {
					limit = {
						has_trait = generous
					}
					multiply = 0.5
				}
			}
			scope:cover_travel_expenses = yes
			desc = AI_TRAVEL_EXPENSES
		}

 		# Amenities impact
 		## Actor's amenities increases acceptance
 		modifier = {
 			add = {
 				value = 10
 				if = {
 					limit = {
 						scope:actor = {
			 				has_royal_court = yes
			 				amenity_level = { type = court_lodging_standards value >=  high_amenity_level }
			 			}
 					}
 			 		add = 10
 				}
 				if = {
 					limit = {
 						scope:actor = {
			 				amenity_level = { type = court_lodging_standards value >=  very_high_amenity_level }
			 			}
 					}
 			 		add = 10
 				}
 				if = {
 					limit = {
 						scope:actor = {
			 				amenity_level = { type = court_lodging_standards value >=  max_amenity_level }
			 			}
 					}
 			 		add = 20
 				}
 			}
 			desc = AI_COURT_LODGING_STANDARDS_QUALITY
			scope:actor = {
			 	has_royal_court = yes
				amenity_level = { type = court_lodging_standards value >=  medium_amenity_level }
			}
 		}
		## Target's liege amenities decreases acceptance 
 		modifier = {
 			add = {
 				value = -10
				if = {
					limit = {
						liege = {
							amenity_level = { type = court_lodging_standards value >=  high_amenity_level } 
						}
					}
					add = -10
				}
				if = {
					limit = {
						liege = {
							amenity_level = { type = court_lodging_standards value >=  very_high_amenity_level } 
						}
					}
					add = -10
				}
				if = {
					limit = {
						liege = {
							amenity_level = { type = court_lodging_standards value >=  max_amenity_level } 
						}
					}
					add = -20
				}
 			}
 			desc = AI_LIEGE_COURT_LODGING_STANDARDS_QUALITY
			exists = liege
			is_courtier_of = liege
			liege = {
				has_royal_court = yes
				amenity_level = { type = court_lodging_standards value >=  medium_amenity_level }
			}
 		}
	}

	ai_will_do = {
		always = no
	}


	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}