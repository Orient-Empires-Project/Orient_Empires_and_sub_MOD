great_misit_kill_liege_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 80
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_kill_liege_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_kill_liege_interaction } }
				}
				has_misit_power = { VALUE = 100 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -100 }
			trigger_event = {
				id = great_misit.0001
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_request_vassal_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_request_vassal_interaction_desc
	needs_recipient_to_open = yes
	ai_frequency = 480
	populate_actor_list = {
		scope:recipient = {
			every_vassal = {
				limit = {
					is_ruler = yes
					highest_held_title_tier <= 4
					highest_held_title_tier >= 2
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			primary_title.tier <= scope:actor.primary_title.tier
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_request_vassal_interaction } }
				}
				has_misit_power = { VALUE = 200 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			if = {
				limit = {
					scope:secondary_actor.primary_title.tier = tier_kingdom
				}
				scope:actor = {
					add_misit_power = { VALUE = -100 }
				}
			}
			if = {
				limit = {
					scope:secondary_actor.primary_title.tier >= tier_duchy
				}
				scope:actor = {
					add_misit_power = { VALUE = -60 }
				}
			}
			if = {
				limit = {
					scope:secondary_actor.primary_title.tier = tier_county
				}
				scope:actor = {
					add_misit_power = { VALUE = -30 }
				}
			}
			trigger_event = {
				id = great_misit.0002
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_awarded_title_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	target_type = title
	target_filter = recipient_domain_titles
	icon = icon_entrench_regency
	desc = great_misit_awarded_title_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_awarded_title_interaction } }
				}
				has_misit_power = { VALUE = 300 }
			}
			is_physically_able = yes
		}
	}
	can_be_picked_title = {
		scope:target = {
			holder = scope:recipient
			tier = tier_county
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -200 }
			trigger_event = {
				id = great_misit.0003
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_forced_marriage_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 80
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_forced_marriage_interaction_desc
	needs_recipient_to_open = yes
	ai_frequency = 480
	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_at_home = yes
					is_ruler = no
					is_adult = yes
					is_female = yes
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			is_physically_able = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_forced_marriage_interaction } }
				}
				has_misit_power = { VALUE = 100 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -50 }
			trigger_event = {
				id = great_misit.0004
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_had_sex_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 70
	greeting = positive
	cooldown = { years = 3 }
	ai_frequency = 480
	icon = icon_entrench_regency
	desc = great_misit_awarded_title_interaction_desc

	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_female = yes
			is_available = yes
			is_adult = yes
			is_ai = no
		}
		scope:recipient = {
			NOT = { has_relation_lover = scope:actor }
			is_available = yes
			is_adult = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_had_sex_interaction } }
				}
				has_misit_power = { VALUE = 50 }
			}
			is_physically_able = yes
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = 20 }
			trigger_event = {
				id = great_misit.0005
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_designate_heir_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 70
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_designate_heir_interaction_desc
	needs_recipient_to_open = yes

	populate_actor_list = {
		scope:recipient = {
			every_child = {
				limit = {
					OR = {
						is_ruler = no
						highest_held_title_tier <= 2
					}
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			is_incapable = no
		}
		NOT = {
				scope:secondary_actor = scope:recipient.designated_heir
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_designate_heir_interaction } }
				}
				has_misit_power = { VALUE = 200 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -30 }
			trigger_event = {
				id = great_misit.0006
				days = 3
			}
		}
	}
	auto_accept = yes
}

great_misit_beauties_of_the_emperor_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_beauties_of_the_emperor_interaction_desc
	needs_recipient_to_open = yes
	ai_frequency = 480
	populate_actor_list = {
		scope:recipient = {
			every_spouse = {
				limit = {
					is_adult = yes
					is_ruler = no
					OR = {
						is_female = yes
						AND = {
							is_female = no
							NOT = { scope:actor = { is_female = no } }
						}
					}
				}
				add_to_list = characters
			}
			every_consort = {
				limit = {
					is_adult = yes
					is_ruler = no
					OR = {
						is_female = yes
						AND = {
							is_female = no
							NOT = { scope:actor = { is_female = no } }
						}
					}
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_adult = yes
			is_ai = no
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			is_incapable = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_beauties_of_the_emperor_interaction } }
				}
				has_misit_power = { VALUE = 100 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -200 }
			trigger_event = {
				id = great_misit.0007
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_add_weak_hook_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_add_weak_hook_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_adult = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_add_weak_hook_interaction } }
				}
				has_misit_power = { VALUE = 30 }
			}
			is_adult = yes
			is_physically_able = yes
		}
		scope:recipient = {
			is_adult = yes
			is_physically_able = yes
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -30 }
			trigger_event = {
				id = great_misit.0008
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_become_the_successor_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 90
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_become_the_successor_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_adult = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_become_the_successor_interaction } }
				}
				has_misit_power = { VALUE = 500 }
			}
			is_physically_able = yes
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -300 }
			trigger_event = {
				id = great_misit.0009
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_send_nakatomi_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_send_nakatomi_interaction_desc
	needs_recipient_to_open = yes
	cooldown = { years = 3 }
	ai_frequency = 480
	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_ruler = no
					is_adult = yes
					OR = {
						intrigue >= 12
						martial >= 12
						diplomacy >= 12
						stewardship >= 12
						learning >= 12
						prowess >= 20
					}
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			is_incapable = no
		}
		NOT = {
				scope:secondary_actor = scope:recipient.designated_heir
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able = yes
		}
		trigger_if = {
			limit = {
				scope:actor = {
					liege = {
						has_diarchy_active_parameter = diarchy_is_primeministership
					}
				}
			}
			# Diarchs must have unlocked the appropriate power.
			scope:actor.liege ?= { has_diarchy_active_parameter = unlock_great_misit_send_nakatomi_interaction }
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = 20 }
			trigger_event = {
				id = great_misit.0010
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_offer_beauty_interaction = {
	category = interaction_category_diarch
	common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_offer_beauty_interaction_desc
	needs_recipient_to_open = yes
	cooldown = { years = 4 }
	ai_frequency = 480
	populate_actor_list = {
		scope:actor = {
			every_courtier = {
				limit = {
					is_at_home = yes
					is_ruler = no
					is_adult = yes
					is_female = yes
					age <= 36
				}
				add_to_list = characters
			}
		}
	}
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			is_ai = no
		}
		scope:recipient = {
			is_female = no
			is_adult = yes
		}
	}
	has_valid_target_showing_failures_only = {
		scope:secondary_actor = {
			is_physically_able = yes
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_offer_beauty_interaction } }
				}
				has_misit_power = { VALUE = 50 }
			}
			is_physically_able = yes
		}
	}

	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = 30 }
			trigger_event = {
				id = great_misit.0011
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_deprived_administrative_power_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_deprived_administrative_power_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			NOT = { has_trait = great_misit_administrative }
			can_use_great_misit_interaction = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			is_adult = yes
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_deprived_administrative_power_interaction } }
				}
				has_misit_power = { VALUE = 300 }
			}
			is_physically_able = yes
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -100 }
			trigger_event = {
				id = great_misit.0024
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_obtain_audience_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	greeting = positive
	icon = icon_entrench_regency
	desc = great_misit_obtain_audience_interaction_desc
	ai_frequency = 480
	is_shown = {
		scope:actor = {
			can_use_great_misit_interaction = yes
			NOT = { has_trait = great_misit_audience }
			is_adult = yes
			is_ai = no
		}
	}
	is_valid_showing_failures_only = {
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_obtain_audience_interaction } }
				}
				has_misit_power = { VALUE = 200 }
			}
			is_physically_able = yes
		}
	}
	on_accept = {
		scope:actor = {
			add_misit_power = { VALUE = -100 }
			trigger_event = {
				id = great_misit.0025
				days = 3
			}
		}
	}
	auto_accept = yes
	ai_will_do = {
		base = 0
	}
}

great_misit_revoke_title_interaction = {
	category = interaction_category_diarch
	#common_interaction = yes
	#diarch_interaction = yes

	interface_priority = 60
	highlighted_reason = HIGHLIGHTED_HAS_REVOKE_TITLE_REASON
	notification_text = REVOKE_TITLE_PROPOSAL

	desc = great_misit_revoke_title_interaction_desc

	special_interaction = revoke_title_interaction
	interface = revoke_title
	target_type = title
	target_filter = recipient_domain_titles
	ai_maybe = yes
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes

	ai_min_reply_days = 4
	ai_max_reply_days = 9

	on_decline_summary = general_rebellion_decline_summary

	# actor character giving the titles
	# recipient character receiving the titles

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			can_use_great_misit_interaction_peer = yes
			is_adult = yes
			is_ai = no
		}
		scope:recipient = {
			is_landed = yes
			# should be shown but be disabled for indirect vassals
			NOT = { target_is_liege_or_above = scope:actor }
			is_vassal_of = scope:actor.liege
		}

		trigger_if = {
			limit = {
				scope:actor = {
					is_ai = yes
				}
				# No point revoking barons at this time
				scope:recipient.primary_title.tier >= tier_county
			}
		}
	}

	is_valid_showing_failures_only = {
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
		scope:actor = {
			trigger_if = {
				limit = {
					NOT = { liege ?= { has_diarchy_active_parameter = unlock_great_misit_revoke_title_interaction } }
				}
				has_misit_power = { VALUE = 200 }
			}
			is_physically_able = yes
			custom_description = {
				text = "character_interactions_revoke_title_from_ally_without_reason"
				object = scope:recipient
				OR = {
					NOT = {
						is_allied_to = scope:recipient
					}
					has_revoke_title_reason = scope:recipient
				}
			}
			trigger_if = {
				limit = {
					NOT = { liege = { has_diarchy_active_parameter = diarchy_is_primeministership } }
				}
				trigger_if = {
					limit = { government_has_flag = government_is_tribal }
					custom_description = {
						text = "has_law_allowing_title_revocation_tribal"
						has_realm_law_flag = title_revocation_allowed
					}
				}
				trigger_if = {
					limit = {
						NOT = { government_has_flag = government_is_tribal }
					}
					custom_description = {
						text = "has_law_allowing_title_revocation_crown"
						has_realm_law_flag = title_revocation_allowed
					}
				}
			}
			trigger_if = {
				limit = {
					scope:recipient = {
						vassal_contract_has_flag = vassal_contract_cannot_revoke_titles
					}
				}
				custom_description = {
					text = vassal_contract_forbids_revocation
					scope:recipient = {
						NOT = { vassal_contract_has_flag = vassal_contract_cannot_revoke_titles }
					}
				}
			}
		}
		scope:recipient = {
			NOT = { target_is_liege_or_above = scope:actor }
			is_vassal_of = scope:actor.liege
			is_available_for_activity_trigger = yes
			NOT = { has_strong_hook = scope:actor }
		}
	}

	can_send = {
		scope:actor = {
			custom_description = {
				text = "character_interactions_hostile_actions_disabled_delay"
				NOT = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
		}
	}

	# Highlighted in the interaction menu when right-clicking a character
	is_highlighted = {
		OR = {
			scope:actor = {
				has_revoke_title_reason = scope:recipient
			}
			scope:recipient = {
			 	any_held_title = {
					scope:actor = {
						has_claim_on = prev
					}
				}
				NOT = {
					any_ally = {
						this = scope:actor
					}
				}
			}
		}
	}

	can_be_picked_title = {
		scope:target = {
			is_contested = no
			NOT = {
				recent_history = {
					type = granted
					years = 1
				}
			}
			custom_description = {
				text = "character_interactions_not_rel_head_title"
				is_head_of_faith = no
			}
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0200
		}
	}

	on_accept = {
		# Since this is a confusing interaction, we want to clarify what you're nicking.
		scope:actor = { custom_tooltip = diarch_revoke_title_interaction.tt.gain_title }
		# To keep some other arcane script working.
		save_scope_value_as = {
			name = revoke_title_interaction
			value = yes
		}
		scope:actor = {
			# Tell them that the revocation went through fine.
			trigger_event = char_interaction.0262
		}
		# Otherwise, follow the standard flow for revocation.
		save_scope_value_as = {
			name = use_strife_not_tyranny
			value = yes
		}
		revoke_title_interaction_effect = yes
		scope:actor = {
			# Scope:actor can be hostile again.
			clear_hostile_actions_lock_flag_effect = yes
		}
		# To avoid unlanded regents becoming vassals of the liege's direct vassals, make sure the current liege remains the liege
		hidden_effect = {
			scope:actor = {
				if = {
					limit = { 
						is_landed = no
						NOT = { scope:intermediary = scope:recipient }
					}
					# This has a delay of 1 day (if no delay then the liege change doesn't stick) which really isn't ideal and should be looked into/fixed so that it happens when the action goes into effect
					trigger_event = { id = diarchy.0141 days = 1 }
				}
			}
		}
		scope:actor = {
			# trigger_event = char_interaction.0199
			add_misit_power = { VALUE = -50 }
		}
	}

	on_decline = {
		if = {
			limit = {
				scope:landed_title.tier != tier_barony
			}
			scope:actor = {
				title_revocation_stress_effect = { VASSAL = scope:recipient }
			}
		}
		war_for_revoke_effect = {
			LIEGE = scope:actor
			REBEL = scope:recipient
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { has_realm_law_flag = vassal_refusal_is_treason }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = {
				scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}

	auto_accept = {
		scope:recipient = {
			calc_true_if = {
				amount >= 1
				custom_description = {
					text = "baron_revocation"
					highest_held_title_tier = tier_barony
				}
				custom_description = {
					text = "prisoner_revocation"
					is_imprisoned_by = scope:actor
				}
				custom_description = {
					text = "spending_hook"
					subject = scope:actor
					object = scope:recipient
					scope:hook = yes
					scope:actor = { has_strong_hook = scope:recipient }
				}
				custom_description = {
					text = "foreign_prison_revocation"
					subject = scope:actor
					object = scope:recipient
					scope:recipient = {
						is_imprisoned = yes
						NOT = { is_imprisoned_by = scope:actor }
					}
				}
			}
		}
	}
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = 20
			scope:actor = {
				has_realm_law_flag = vassal_refusal_is_treason
			}
			desc = AI_REFUSAL_IS_TREASON
		}

		modifier = {
			add = 20
			scope:recipient = {
				has_trait = trusting
			}
			desc = TAKE_THE_VOWS_TRUSTING
		}

		modifier = {
			add = 20
			scope:recipient = {
				has_trait = content
			}
			desc = INTERACTION_CONTENT
		}

		modifier = {
			add = 20
			scope:actor.current_military_strength > scope:recipient.current_military_strength
			scope:recipient = {
				has_trait = craven
			}
			desc = INTERACTION_CRAVEN
		}

		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL
		}

		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			NOR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			scope:landed_title.de_jure_liege = scope:actor.primary_title.title_capital_county.de_jure_liege
			add = 30
			desc = AI_TITLE_IS_IN_CAPITAL_DUCHY
		}

		modifier = {
			add = 30
			scope:actor = {
				has_claim_on = scope:landed_title
			}
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}

		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = {
						scope:recipient = { NOT = { ai_greed = 0 } }
					}
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						scope:recipient = { #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
							ai_honor > 0
						}
						scope:actor = {
							has_realm_law_flag = vassal_refusal_is_treason
						}
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}
		modifier = { #Title is part of vassal's primary title de-jure.
			add = -25
			scope:recipient.primary_title.tier > tier_county
			OR = {
				scope:recipient.primary_title = {
					is_de_jure_liege_or_above_target = scope:landed_title
				}
				scope:recipient.primary_title = scope:landed_title
			}
			desc = AI_REFUSAL_IS_DE_JURE_UNDER
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.current_military_strength
					divide = { value = scope:actor.current_military_strength min = 1 }
					}
				multiply = 50
				max = 20
	  		}
		}
		modifier = { # Legalistic tradition
			desc = tradition_legalistic_name
			scope:actor = {
				has_revoke_title_reason = scope:recipient
				culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
			}
			add = legalistic_vassal_punishment_acceptance
		}
		modifier = { # AI Mongols, tyranny wars just delay the inevitable fun!
			scope:actor = {
				is_ai = yes
				OR = {
					has_trait = greatest_of_khans
					has_character_modifier = the_great_khan_modifier
				}
			}
			scope:recipient = {
				is_ai = yes
			}
			add = 500
		}
	}

	# AI
	ai_targets = {
		ai_recipients = vassals
	}
	ai_frequency = 0 # This is handled via code instead; see REVOKE_TITLE_TICK in the AI defines. All the logic for *if* to send a revoke though is scripted below

	ai_potential = {
		has_realm_law_flag = title_revocation_allowed
		primary_title.tier > tier_county
	}

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = {
						title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
					}
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:landed_title = scope:actor.primary_title.title_capital_county
				scope:landed_title = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			NAND = { # Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
				scope:landed_title.holder = {
					is_ai = no
				}
				scope:actor = {
					title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient }
				}
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:landed_title.tier = tier_county
			scope:landed_title.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = {
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			OR = { # Chill a bit until you've dealth with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = {
			add = scope:landed_title.tier
		}
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = {
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
			}
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.current_military_strength < scope:recipient.current_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}

		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = {
				is_at_war = yes
			}
			scope:recipient = {
				NOT = {
					is_imprisoned_by = scope:actor
				}
			}
		}
	}
}
